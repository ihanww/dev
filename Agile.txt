

实施敏捷开发，看这一篇就够了
https://zhuanlan.zhihu.com/p/37815239

作为一家产品公司，定义愿景的最佳方法之一是电梯演讲：

用于：（哪部分目标客户）
需求：（用户的需求）
类别：（我的产品是哪种类型）
功能：（产品的价值、客户为什么选我们）
竞品：（主要的竞争对手有哪些）
差异化：（和竞品的差异化描述）

即使我们做的不是软件产品，我们也可以根据项目的目标来调整上述内容。


从本质上讲，敏捷（Agile）并不是开发方法，而是一种理念。对于项目管理而言，敏捷是一个全新的术语，
敏捷强调在软件研发过程中持续性的根据用户反馈和需求优先级来发布新版本，不断进行迭代，让产品逐渐完善。


敏捷价值观

敏捷开发的关注点就是交付。

敏捷价值观有四项内容，即：

1、个人与互动胜过过程与工具（Individuals and interactions over processes and tools）

在项目管理过程中，过程和工具是比较重要的。在过程、工具和个人、互动相比较，过程、工具就显得没那么重要。
这也就是我们常说的：成也萧何，败也萧何。事在人为。天下事，重在商榷。

2、可用的软件胜过复杂的文件(Working software over comprehensive documentation)

在互联网plus、大数据时代下，通过收集有效数据、信息，再进行汇总、分析、挖掘，
项目干系人通过移动端即可实时监控项目进展和状况，这远比复杂的文件更高效。那么，要想实现这一功能，就离不开可用的软件平台。

3、与客户合作胜过合同谈判(Customer collaboration over contract negotiation)

甲乙双方，在平等互利的基础上，签署合同。换句话说：签订合同，就是在平等的基础上，为了实现双赢。
只有彼此合作，才能追求双赢。这也正是项目管理之所以重视沟通的原因所在。

4、响应变更胜过遵循计划(Responding to change over following a plan)

项目的特征之一就是渐进明细。人们常说：计划赶不上变化快。在规划阶段，不论我们的计划做得多么详细，
在实施阶段，总会有意想不到的问题发生。在项目管理过程中，变更在所难免。正确面对变更，是每个项目管理者最睿智的抉择。


我将之总结为：

以人为本：重视个体间的合作互动
目标导向：我们最终交付的是“可使用的软件”，而不是一堆繁重的文档
客户为先：理解客户需求，与客户合作
拥抱改变：客户会在不断变化需求的过程中明晰真正需要的，因此敏捷需要拥抱变化

尽管如此，这四项价值观并不意味着我们就该放弃工具、文档和计划。
因为它们对研发结果依然有非常重要的价值，只是相比之下，
我们应该关注更核心的事物：人、产品模型、协作和迭代。
为了让这四项原则变得简单易懂好执行，他们又将写了敏捷开发12项原则作为指导：

//-----------------------------------------------------

敏捷开发的12原则，这12原则作为敏捷开发对于软件开发流程的指导性纲领，
也是对敏捷宣言进行了具有实际操作意义的解释，希望大家在实际应用中仔细体会。

我们遵循以下准则：

01.通过早期和持续交付有价值的软件，实现客户满意度。
02.欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。
03.不断交付可用的软件，周期通常是几周，越短越好。
04.项目过程中，业务人员与开发人员必须在一起工作。
05.项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。
06.面对面交谈是最好的沟通方式。
07.可用性是衡量进度的主要指标。
08.提倡可持续的开发，保持稳定的进展速度。
09.不断关注技术是否优秀，设计是否良好。
10.简单性至关重要，尽最大可能减少不必要的工作。
11.最好的架构、要求和设计，来自团队内部自发的认识。
12.团队要定期反思如何更有效，并相应地进行调整。


01.我们的最高目标是，通过尽早和持续地交付有价值的软件来满足客户。
02.欢迎对需求提出变更——即使是在项目开发后期。要善于利用需求变更，帮助客户获得竞争优势。
03.要不断交付可用的软件，周期从几周到几个月不等，且越短越好。
04.项目过程中，业务人员与开发人员必须在一起工作。
05.要善于激励项目人员，给他们以所需要的环境和支持，并相信他们能够完成任务。
06.无论是团队内还是团队间，最有效的沟通方法是面对面的交谈。
07.可用的软件是衡量进度的主要指标。
08.敏捷过程提倡可持续的开发。项目方、开发人员和用户应该能够保持恒久稳定的进展速度。
09.对技术的精益求精以及对设计的不断完善将提升敏捷性。
10.要做到简洁，即尽最大可能减少不必要的工作。这是一门艺术。
11.最佳的架构、需求和设计出自于自组织的团队。
12.团队要定期反省如何能够做到更有效，并相应地调整团队的行为。


敏捷方法是通过频繁的重新校准和拥抱变化来达成正确的目标,
而不是试图预测环境和消除不确定性.

//-----------------------------------------------------

敏捷原则

敏捷原则共12条，为了更好地理解和掌握敏捷原则，我们把它重新排列归为两类，
即成果交付原则（6条）和人员交互原则（6条）。

1、成果交付原则

价值排序，尽早交付

敏捷原则第1条：我们第一优先的任务是，通过尽早且持续交付有价值的软件（系统）来满足客户
（Our highest priority is to satisfy the customer through early and continuous delivery of valuable software）。

项目之所以被立项，是因为它有存在的价值。既然项目是有价值的，那么它越早交付，价值呈现越明显。在安排交付顺序（里程碑）时，
把握客户的痛点和敏感点，优先交付客户关注的内容，可以尽早、持续地让客户满意，有效降低项目收尾时，客户不满意的风险。

拥抱变化，提高优势

----------------------------

敏捷原则第2条：即使在最后开发阶段，也要竭诚欢迎改变需求，敏捷过程掌控变更，以维护客户的竞争优势
（Welcome changing requirement , even late in development . Agile processes harness change for the customer’s competitive advantage）。

在项目管理过程中，既然无法回避变更，那么就该正确面对变更。发生变更，分析变更，做出正确判断，最后执行变更计划。
敏捷团队不能坐视问题不管，要敢于迎接改变，尽早修正，让价值最大化、伤害最小化。

持续交付，小步快跑

----------------------------

敏捷原则第3条：经常交付可用的软件（系统），频率可以从数周到数月，以较短的时间间隔为佳
（Deliver working software frequently , from a couple of weeks to a couple of months , with a preference to the shorter timescale）。

在项目管理过程，我们与客户沟通，往往出于两种原因：第一种原因是遇到问题，需要沟通、协商、解决，第二种原因是有成果产出，需要用户确认。
如果能持续、快速地交付成果给用户，无疑会博得用户的青睐、支持和认可，利于项目工作推进。

成果达成，衡量进度

----------------------------

敏捷原则第7条：可用的软件（系统）是进度的主要测量标准
（Working software is the primary measure of progress）。

现在，一些企业实行项目管理考核制，旨在提高项目管理效益，可是人为衡量、鉴定项目的进度，相对困难（延误的借口总会有的），
甚至产生意见和分歧。如果能借助相应的管理软件（平台），可以让干系人直观地查看项目进度，回避意见和分歧。

追求卓越，强化敏捷

----------------------------

敏捷原则第9条：持续专注于追求卓越的技术与优良的设计以强化敏捷力
（Continuous attention to technical excellence and good design enhances agility）。

精益求精，让敏捷更加敏捷。在发布、迭代的过程中，不断精益设计，卓越产品或成果，产出令用户满意的产品或成果。返工少了，变更少了，项目更敏捷了。

精简产品，杜绝浪费

----------------------------

敏捷原则第10条：精简——精髓是要尽最大的可能，排除不需要做的工作
（Simplicity-the art of maximizing the amount of work not done-is essential）。

敏捷管理，虽然以客户为导向，拥抱变更，但是同样要控制范围，尽最大可能排除不需要做的工作。坚决杜绝需求范围蔓延现象。

//------------------------------------------------------------

2、人员交互原则

团队合作，每日互动

敏捷原则第4条：业务人员与开发者在项目进行中，必须每天一起工作
（Business people and developers must work together daily throughout the project）。

不论是传统项目管理，还是现代项目管理，甚至敏捷项目管理，都提倡集中办公。
不过敏捷管理，要求更加苛刻。敏捷团队成员，必须在一起工作，每天组织15分钟立会。

信任成员，给予支援

----------------------------

敏捷原则第5条：项目靠积极的个人来完成，给予他们所需的环境与支持，并相信他们可以完成工作
（Build projects around motivated individuals . Give them the environment and support they need , and trust them to get the job done）。

无数条河流，汇聚成大海。来自不同岗位、技能的成员，组成敏捷团队，共同完成项目工作。
相互信任、支持和配合，积极、主动完成工作，加强团队凝聚力，工作就会无坚不摧。
领导再像仆人一样提供服务，为团队创造环境，给予支持，项目不敏捷都没人信。

当面沟通，高效明了

----------------------------

敏捷原则第6条：在开发团队与团队成员之间，面对面的沟通是传播信息最有效率与效能的方式
（The most efficient and effective method of conveying information to and within a development team is face-to-face conversation）。

影响沟通效果的因素之一就是距离。如果项目团队成员能面对面沟通，是最高效的沟通方式。

各方成员，稳定节奏

----------------------------

敏捷原则第8条：敏捷过程提倡稳定持续的开发，发起人、开发者及用户都应该能不断地维持稳定的步调
（Agile processes promote sustainable development .The sponsors , developers , and users should be able to maintain a constant pace indefinitely）。

敏捷管理，是在愿景、资源和时间明确的条件下，采取的一种高效管理方式。
这也就意味着资源不会改变，保证项目时间进度。持续稳定的工作节奏，有利于控制项目的时间进度。
项目干系人应该维持稳定的步调，在适当的时机做适当精度的规划、设计，才能按时持续输出可用的阶段成果。

同心协力，自我组织

----------------------------

敏捷原则第11条：最佳的架构、需求及设计皆来自于能自我组织的团队
（The best architectures , requirement , and designs emerge from self-organizing teams）。

团结就是力量，这力量能克服各种困难。敏捷团队是自我组织、管理的团队。
敏捷项目管理没有明确的架构、需求及设计时间。团队成员同心协力，一起规划、设计，一起完成任务，一起克服困难，一起分享胜利的喜悦。

团队自省，持续改进

----------------------------

敏捷原则第12条：团队定期自省应如何更有效率，并据以调整与修正行为
（At regular intervals , the team reflects on how to become more effective , then tunes and adjusts its behavior accordingly）。

笔者提倡精益敏捷管理，也就是说敏捷要建立在精益的基础之上，脱离精益，盲目敏捷，必将造成返工，或者更多的变更。

敏捷团队成员，在追求卓越的同时，要加强学习，定期反省。在提升自己技能的过程中，及时调整与修正自己的行为，才能成为真正的敏捷成员。

以上敏捷价值观和原则，摘自《敏捷项目管理——基础知识与应用实务》。


//------------------------------------------------------------------------------------------------------------------

敏捷开发的26条至理名言 快速迭代式开发使用方法总结
https://blog.csdn.net/caoyouxing/article/details/39520183

敏捷开发真正的问题是什么？其实敏捷主要还是一种观念，一种意识，通过人来推动。
本文总结了26条有关敏捷开发的关键原则，如何快速迭代式开发，供读者参考借鉴，以指引敏捷软件开发团队。

1、完整地干完一件事后在开始另一件事：用厨房比喻来说就是：“先上这道菜，再开始做下一道”。
软件开发的最大问题就是同时开始几件事情，这将不可避免的造成某些工作被废弃，从而造成浪费。
专注于一件事；完整地实现其功能；运行测试；编写文档；签入所有，把这当做一项工作完成，然后再开始下一件事。


2、不要破坏构建：非常明显，但必须被包含在任何软件开发建议清单中。
程序员在签入之前采取所有合适的预防措施进行测试，则永远不会破坏构建。如果构建被破坏，通常是因为有人偷懒了。


3、在用例需要之前，不要实现程序：当你实现一个特定的类，你应该在脑海中有一个特定的用例，同时应该只实现用例需要的方法。
你可以考虑该类潜在的功能，写入注释之中，但直到用例真正需要时，才应去实现它。


4、在用例需要之前，不要添加数据成员：同上一条，不过这是从类的数据成员角度考虑的。
似乎显而易见地，“客户”记录需要“送货地址”，但直到有用例明确需要送货地址，才应该实现它。


5、不要害怕做决定，不要害怕改变先前的决定：敏捷开发是关于相应变化和快速相应的。
开发初期，你没有完整的信息。你应该尽可能的推迟决策，直到你必须做出决策的时候。
没有信息，无法支持你的决定，相反，在有效信息的基础上做出最佳决定。
有了新的信息，不要害怕改变先前的决定。（某些“恐龙”称之为摇摆不定，但我称之为响应变化的环境）


6、持续学习如何改善质量：这项工作永不会结束，因此你应经常留意可以改善的事情，并收集质量问题被确认和处理的案例。


7、度量、度量、度量：敏捷开发帮助处理未来不确定性问题，但对于过去应没有不确定性。测试应持续运行，每次运行的性能表现应被度量和记录。


8、为人而设计，而不是系统：开发者常常因技术而使设计误入歧途。绝不要忘记设计的最终目标，那就是帮助人们完成工作。


9、测试是产品的一部分：很多开发者和经理认为产品就是交付给客户的东西，而其它所有东西都不那么重要。
测试应被认为是产品实实在在的一个部分，值得在设计时仔细考虑，甚至，在很多情况下，和产品一起交付给客户。
（后半部分有争议，但是内建测试作为软件交付的一部分仅仅占用无关紧要的空间，却在必要时提供显而易见的好处，这种方式应该被考虑。）


10、在代码之前编写测试：测试本身可以用来阐释真正需要的设计。设计的缺陷常常是通过测试用例被发现的。
想想看，编码之前，通过这些用例，可以节约多少时间。但是，为用例1编写测试，然后编码，然后再开始用例2。


11、消除浪费：坦率的说，这是另一个必须包含在任何开发原则清单中的陈词滥调，因为它太重要了。
发现浪费并消除它，这项工作没有尽头。消除任何不能增加客户价值的东西。如果你不能确认客户价值，那很可能你并不需要它。


12、建立对构建破坏立即响应的文化：要明白当构建被破坏，会影响项目中的每一个人，因此，最重要的是确认核心代码被构建并合理测试。
我曾见过有些团队放任失败测试持续数月，因为那是其它人的工作。每个人都痛苦，但没人采取行动。想反，必须形成共识，那就是小工作能为团队获得大的回报。


13、所有团队成员应理解客户需要：大型的复杂项目定然被分解为独立的团队，进而被分派给开发人员。
但是，不应在此范围内做的是，失去关注最终项目真正用户的期望和目标。


14、把相关定义放在一起：组织代码以使高度相关的事情在一起，或在一个类中。
这是标准面向对象设计封装原则。理想情况下，所有的类外的代码不需要知道内部工作细节。
一些开发者乐于将细节扩散到多个文件中以便按不同方式组织，如所有相同的数据类型放在一起，或者按字母顺序组织。
例如，在他们要用的不同包中，将所有常量放在一个类里，这增加了不必要的程序复杂性。指导原则应该是按相关性分组从而隐藏复杂性。


15、始终在签入之前运行测试：这条准则帮助你满足“不要破坏构建”准则。


16、过早的优化时万恶之源：引用高德纳被证实的话：代码应编写良好以避免微观层面的浪费，
但独立方法层次以外的优化应等待整个程序基于真实的最终用户使用情景的压力测试的进行。
仅仅基于对代码的静态理解，直觉地判断对整体性能什么是重要的，结论几乎总是错误的。
相反，度量整个系统的行为，辨别1%真正影响性能的代码，并专注于此。


17、减少积压未完成的编码任务：当开发人员开始一个用例，会发生成本，跟已修改却未完成和测试的代码相关联。
留着未完成的变化几天或几个星期会累积成巨大的重做风险。考虑每个估算需要一天的三个任务，同时开始这三个任务，并在3天内同时进行，意味着9个单位的累计成本。
但是顺序进行每个任务，完成一个再开始下一个，意味着只有3个单位的成本。这个不是直觉，直觉告诉我们，在工作完成之前，我们不妨同时做三件事情。
但软件不像物理构造。短小，快速和完整的工作不仅减少认知的负担，而且减少未完成工作与他人未完成工作之间冲突的可能。


18、不要过度强调代码的通用性：这就是著名的“YAGNI-你不会需要它”。当编写一个特定类的时候，程序员总喜欢认为该类可能用于其它用途。
如果现在的用例需要这些用途，这很好，但是，程序员经常考虑未被提及的用途，或者那些实际上永远不需要的。（
这常常让我联想到经典的周六现场滑稽短剧，关于某产品既是地板蜡，也是糕点上的甜食。）


19、两行代码能行，就不要用三行：有人阅读时，简洁的代码总能获得回报。但不要将代码压缩到难以阅读。
更小的，编写良好的代码比之冗长的，编写华丽的代码更容易维护，也更容易发现错误。始终尽可能简化，但别过分。


20、不要用行数来度量代码：完成特定任务所需的代码行数，不同的程序员之间和编码风格之间差异很大。
代码行数不能告诉你代码完成和质量的些许东西。代码质量可以相差200倍，这足以抵消代码行数的作用。应该统计功能用例的数目。


21、持续地重新设计和重构：谨慎地使用这条准则，因为有些代码脆弱而难以改变，但通常你不应害怕更改代码以符合实际使用情况。
一个数据成员过去可能是整数，但是当一个用例要求它是一个浮点数时不要害怕去改变它。


22、删除死代码：涉及到大量不能很好理解的代码是，有个倾向是不自找麻烦。一个例子就是往类中增加新的方法去替换另一个，开发人员常常会留下旧的方法以防万一。
必须努力检查方法是否必须，如果没有证据表明它是必须的，那就删除它。最糟糕的就是注释掉大量的代码，并把它留在那儿。
注释掉的代码应在测试通过后尽快删除，当然应在签入之前。因此，某个时候你发现一些东西可能并不需要，付出小小的努力去验证并消除此代码能让代码基线更易维护。


23、不要发明新语言：程序员喜爱使用文本文件配置在运行时驱动功能。没有配置文件能够不编译而改变程序的行为。
XML的出现推动了无休止的专门定制“脚本语言”的浪潮，以使功能能被最终用户定制而不需要编译。
这种推理的缺陷在于，离开某个特定实施的环境，操作行为几乎从来没能很好地精确定义，同时，那些脚本语言只对那些对问题领域代码的内部运行有深入了解的人有用。
因此，不具备详尽内部知识的真实最终用户永远不可能知道预料复杂的命令组合的效果需要什么。
脚本语言有用，也不能被消除，但是设计者必须采取非常非常保守的态度，尽可能使用现有的语言，避免新的发明。


24、在你准备实现并测试前，别做设计：你应该有行进的总体思路和对系统架构的概览，
但是，直到开发迭代允许设计被实现和测试前，不要做详细设计，不要编写功能实现的详细说明。
详细设计应当只涉及到处理目前的用例。软件开发中最大的浪费源于将时间花在设计那些不需要，或者因为某些错误的设计假定而需要重新设计的事情之上。


25、设计是可塑的：不像物理制造，软件可以很容易地获得显著改变。事实上，有大量证据证明软件本身比描述软件的设计说明书更容易改变。
此外，软件比说明书更有效地传达设计。因此，你应该把时间用于直接实现设计，让客户能看见设计的细节。
如果你犯错并改变设计，改变软件比改变规格更容易。但最重要的是，客户看到代码运行后，你关于客户想要什么的信息大为完善。


26、花时间编写发现和报告异常情况的代码中的问题的完整描述：程序员往往很懒惰，抛出粗浅描述错误的异常。
认为他们永远是唯一会看到这个问题的人，并且他们从含糊的描述会记得这个问题的意思。但实际上，在客户支持环境，不准确或者不完整的错误报告比其它原因浪费更多的时间。
编写每个错误消息，就好像你正向某个正好走进房间并且没有此代码经验的人解释状况。客户和客户支持团队毕竟没有此代码的经验。


这些介绍没有特定的顺序，欢迎留言讨论我忽略的原则，或者（如果是这种情况）你不认同的敏捷开发原则。




//------------------------------------------------------------------------------------------------------------------


产品需求管理

*********************************************************************************************************************

项目基础概念

什么是项目?

在既定的资源和要求的约束下, 为实现某种目标而相互联系的一次性工作任务.
为完成一件独特的事情所做的全部努力.

独特性(不可逆转), 临时性(突发问题), 渐进明细(逐步完善).


什么是项目管理?

项目管理是有效整合资源, 高效实现目标的一整套独特的管理理念,方法体系.
特别适用于影响重大,事务复杂,时间紧迫,资源有限的一次性工作任务.


项目:  范围, 时间, 成本, 质量.


*********************************************************************************************************************

项目流程管理
https://www.bilibili.com/video/BV1QA411q7Tg

项目目标 >> 项目计划 >> 项目跟踪 >> 项目优化 >> 项目验收

项目目标: 设定项目验收标准

项目计划: 项目范围, 项目拆分, 时间/资源/成本, 设定基准

项目跟踪: 根据基准跟踪, 进度/资源/成本

项目优化: 出现冲突, 调整方案

项目验收: 按时, 预算范围内, 保质保量完成.

*********************************************************************************************************************

目标设定的SMART原则

目标设定的SMART原则来源于管理大师彼得·德鲁克的《管理的实践》，有五个基本的原则：

1.目标必须是具体的（Specific）
2.目标必须是可以衡量的（Measurable）
3.目标必须是可以达到的（Attainable）
4.目标必须和其他目标具在相关性（Relevant）
5.目标必须具在明确的截止期限（Time-based）


以上五个原则是常用在工作者和管理者之间，对于个人成长之类的目标，是自己单方的目标，
使用以上原则还有可以优化的地方，目的只有一个，如何设定高达成度的目标。
以下对五个原则做一个补充。

1.具体（Specific）。目标一定要明确，一次只能聚集一个目标，如果目标太大，就要把目标分解一个个小目标，并且是清晰的，要有明确的结果。
目标清晰就是尽将结果图像化，在达到的目标能用一句话说清楚。目标有标准去衡量，还要有实现目标的计划。

2.可测量（Measurable）。可测量就是目标是否达成可以用指标或成果的形式进行衡量。
在目标实现的过程中，目标的进度最好也是可以衡量的，至少有几个关键事件点来表示目标的实现的进度。
在实现目标的过程中，对于完成目标的一些事务或关键事务是可以量化的。

3.我愿意的（Agreed on）。目标是自己的意愿，是自己真正想去实现的，是值得自己努力获取的。

4.可实现的（Realistic）。目标是基于自身的条件的，千万不可脱离太多的既有条件，
有时，远大的目标会让人在实现目标的过程中迷茫和焦虑，如何有比较远大的目标，一定要把目标分解成多个小目标。
可实现还包括要分配一定的时间和精力，光制订目标，然后不能安排时间和精力或其他必要的资源，目标也是不现实的。

5.时间限制的（Time-based）。目标一定要有时间限制，否则，时间一长，新鲜感一过，目标就很难再继续下去了。


实现目标需要很多条件，除了以上几个原则外，还有以下几条需要注意：

1.清晰的力量。能够一句话说清晰自己的目标，并且尽量把所要的结果图像化，
能够帮助我们在实现目标的过程中区分一些事务对目标的影响，哪些是重要的？哪些是不重要的。

2.定期检视。定期检视自己要实现的目标与当前的进度计划，及时的对实现目标过程中所做的事务的复盘，找到做的好的地方和做的不好的地方。
要认识到实现目标的过程不是线性接近目标的，是曲线波折的，在低谷时，也不要灰心，这有助于帮助我们渡过迷茫期。

3.奖励。一定要对自己实现目标后，设定一个奖励。

*********************************************************************************************************************

软件缺陷的基本内容
https://www.bilibili.com/video/BV1jE41117sC

1.缺陷的基本内容:
缺陷标题 >> 预置条件 >> 重现步骤 >> 期望结果 >> 实际结果

2.缺陷的状态:
新建(激活) >> 打开 >> 修复(延期/拒绝) >> 关闭 

3.缺陷的严重程度(产品角度)
建议 >> 一般 >> 严重 >> 致命
Info >> WARN >> ERROR >> FATAL

4.缺陷的优先级)(项目角度)
低(可改可不改) >> 中(需要近期做出修改) >> 高(需要马上做出修改)

5.缺陷的类型(应对策略与方式)
代码错误 >> 设计缺陷 >> 性能问题 >> 安全相关


*********************************************************************************************************************

敏捷开发入门教程
http://www.ruanyifeng.com/blog/2019/03/agile-development.html

敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。

对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次"大开发"；
迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次"大开发"变成多次"小开发"，
每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。

举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。
但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。
结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。
最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。


迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。
开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。
每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。
通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。


迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？
这时，一般采用"增量开发"（incremental development）划分迭代。

所谓"增量开发"，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。

举例来说，房产公司开发一个10栋楼的小区。
如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼......每个迭代都是完成一栋完整的楼。
而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶......

增量开发加上迭代开发，才算真正的敏捷开发。


具体来说，每次迭代都必须依次完成以下五个步骤。

1.需求分析（requirements analysis）
2.设计（design）
3.编码（coding）
4.测试（testing）
5.部署和评估（deployment / evaluation）

每个迭代大约持续2~6周。

//-----------------------------------------------------

敏捷软件开发宣言-里面提到四个价值观。

 程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。
 
 软件能够运行，优于详尽的文档。
 
 跟客户的密切协作，优于合同和谈判。
 
 能够响应变化，优于遵循计划。

//-----------------------------------------------------


什么是 Scrum 

是当前最流行的敏捷软件开发方法论和实施框架。

Scrum 是一种团队管理工作的方式，其将工作分解为较小的工作单元，并在周期性固定的时间段内持续地交付工作单元。

上面描述的周期性固定的时间段，称为迭代（Iteration）或者冲刺（Sprint）。

上面描述的较小的工作单元，称为用户故事（User Story）。

用户故事可以使用特定的格式来描述，其描述了一个对于客户有价值的工作，而且可以在一个迭代周期内完成。

待办事项列表 => 冲刺待办事项 => 冲刺循环阶段(每日例会) => 可交付物

//-----------------------------------------------------

Scrum 敏捷开发流程主要包括：三个角色、三个物件和五个会议。

三个角色

产品经理（Product Owner）：主要负责确定产品的功能和达到要求的标准，指定软件的发布日期和交付的内容，
同时有权力接受或拒绝开发团队的工作成果。

敏捷教练（Scrum Master）：主要负责整个Scrum流程在项目中的顺利实施和进行，
以及清除挡在客户和开发工作之间的沟通障碍，使得客户可以直接驱动开发。

开发团队（Scrum Team）：主要负责软件产品在Scrum规定流程下进行开发工作，人数控制在5~10人左右。

//------------------------

三个物件

1、Product Backlog ： 产品Backlog指根据初始需求分解出的任务列表，包括功能性和非功能性的所有功能。

2、Sprint Backlog ，这是一个迭代计划会议的输出，包含开发团队在迭代周期内所要完成的工作列表。 
如果说产品backlog是以story为单位，文档归属为PM团队，那么Sprint Backlog 是以小时（时间）为单位的，文档归属为开发团队。

3、燃尽图。燃尽图（burn down chart）是在项目完成之前，对需要完成的工作的一种可视化表示。燃尽图有一个Y轴（工作）和X轴（时间）。
理想情况下，该图表是一个向下的曲线，随着剩余工作的完成，“烧尽”至零。燃尽图向项目组成员和企业主提供工作进展的一个公共视图。

//------------------------

五个会议

1）待办事项整理会议（Backlog Grooming Meeting）

迭代计划会议开始之前3天召开，Product Owner与Scrum Master必须参加，关键开发者或架构师需要参加；时间控制在30分钟到1小时。

由Product Owner将一批希望团队在下次迭代时实现的用户故事，按照实现顺序描述给在场的团队成员，
Scrum Master与在场成员分析用户故事，明确指出团队认为需求不明确的地方，Product Owner现场记录，会后补全，
Scrum Master与架构师，还有在场成员分析用户故事需要包含哪些技术任务，Scrum Master先把子任务建立，
方便迭代计划会议的时候团队可以更准确地预估任务故事点。

会议结束时，Product Owner确保在迭代计划会议开始之前团队提出的问题都能被解决，会议重点如果团队发现需要加强或是完善的地方，
Product Owner还有两到三天的时间可以补强，而不是浪费迭代计划会议的时间去做这件事情。

2）迭代计划会议（Sprint Planning Meeting）

产品负责人建立产品功能列表（Product Backlog）。产品功能列表是一组条目化需求，它必须从客户价值角度描述，并按优先级排序。

Scrum Master召集相关人员召开迭代计划会，迭代计划会在每个迭代第一天召开，目的是选择本次迭代的Backlog和估算本次迭代的工作量。

产品负责人逐条讲解最重要的产品功能，开发团队共同估算Backlog所需工作量，直到本迭代工作量达到饱和。
产品负责人参与讨论并回答和需求相关的问题，但不干扰估算结果。队员认领任务（或由组长协商分发），
独立或与别人一起完成任务；会议时间控制在1-2小时内。

3）每日站会（Standup Meeting）

团队内部利用每日立会来沟通进度，15分钟结束，开发团队利用燃尽图来展示整体进度；
如无特殊原因，迭代期内无变更，在每日站会上团队成员需要回答以下3个问题：

昨天你做了什么?
今天你将要做什么?
你有需要帮助的地方吗?
这些都是团队成员的彼此承诺。

4）评审会（Retrospective Meeting）(演示会议)

小组向产品负责人展示迭代工作结果，产品负责人给出评价和反馈。以用户故事是否能成功交付来评价任务完成情况。
整个团队都需要参加，ScrumMaster、产品所有者、团队，可能还有客户，时间控制在1-2小时内。

5）反思会（Retrospective Meeting）(回顾会议)

在每个迭代后召开简短的反思会，总结哪些事情做得好，哪些事情做得不好。做得好的保留，不好的摒弃。
会议得出这样的结论：开始做什么、继续做什么、停止做什么，一般控制在15-30分钟。

Scrum是一套开发流程，是敏捷的一种，实施主要还是看人，强调是自组织、自驱动的，
只有不断的在实际应用中仔细体会，才能理解Scrum的真谛，把Scrum用好。.

//-----------------------------------------------------

七大体系特征：

•1. 经常交付

任何项目，无论大小、敏捷程度，其最重要的一项体系特征是每过几个月就向用户交付已测试的运行代码。
如果你使用了此体系特征，你就会发现，“经常交付”的作用还是很让人吃惊的。

项目主办者根据团队的工作进展获得重要反馈。用户有机会发现他们原来的需求是否是他们真正想要的，
也有机会将观察结果反馈到开发当中。开发人员打破未决问题的死结，从而实现对重点的持续关注。
团队得以调整开发和配置的过程，并通过完成这些工作鼓舞团队的士气。

• 2.反思改进

在我们的开发中，时常会出现这样那样的问题，技术难题、各种烦心事等等，这会在很大的程度上影响项目的进展。
而且，如果其他任务对这项任务有依赖的话，那么其他的任务也会被推迟，这就很可能会导致项目的失败。

换句话说，如果，我们能够经常在迭代会中及时的反思和改进，那么，这种事情应该是不会发生的，或者说发生了，
也能够很快的找到解决方案去应对它。事实上，从慌乱的日常开发中，抽出一点时间来思考更为行之有效的工作方法就已经足够了。

• 3.渗透式交流

渗透交流就是信息流向团队成员的背景听觉，使得成员就像通过渗透一样获取相关信息。
这种交流通常都是通过团队成员在同一间工作室内工作而实现的。若其中一名成员提出问题，
工作室内的其他成员可以选择关注或不关注的态度，可以加入到这个问题的讨论当中来，也可以继续忙自己的工作。

•4. 个人安全

个人安全指的是当您指出困扰您的问题时，您不用担心受到报复。个人安全非常重要，有了它，团队可以发现和改正自身的缺点。
没有它，团队成员们知而不言，缺点则愈发严重以致于损害整个团队。个人安全是迈向信任的第一步。
有了信任，团队协作才能真正的实施，开发效率也就会直线上升的。

•5.焦点

所谓“焦点”，就是确定首先要做什么，然后安排时间，以平和的心态开展工作。
确保团队成员清楚的了解他们自己最重要的任务是什么，确保他们能够有充分的时间去完成这些任务。

• 6.与专家用户建立方便的联系

与专家用户持续建立方便的联系能够给团队提供：对经常交付进行配置以及测试的地方，
关于成品质量的快速反馈，关于设计理念的快速反馈，最新的（用户）需求。

• 7.配有自动测试、配置管理和经常集成功能的技术环境

自动测试可以为开发人员在代码修改后就可以进行自动测试，并且能够发现存在的一些bug，
以至开发人员能够及时的进行修改，对于他们来说，节省了时间，提高了效率，而且还不用为烦人的测试而苦恼。


//-----------------------------------------------------


如何实施Scrum在团队中实施敏捷开发是一个很有挑战性的工作，尤其是Scrum这种描述比较详细、有很多规则的方法。
如果你打算把所有人召集到一起，宣布我们要实施敏捷开发Scrum，然后就照着Scrum的描述开发方法直接实施，
那么，你离失败不远了。想要实施好Scrum，你必须一步步来，一点一点改变团队的习惯，
当一项新制度已经变成本能之后，再推行下一项制度。

>>>>第一步，先把团队的开发任务可视化。你可以用一块白板，让团队成员把所有的开发任务都用便签写好放上去，
也可以找一个专业的看板工具。硬广，我推荐日事清，因为这是我做的产品（http://www.rishiqing.com）。
当所有任务都在看板上，尽收眼底，那种感觉还是很棒的。团队中每个人的工作都会被所有人看到，会形成一种无形的监督。


>>>>第二步，引入站会制度。当团队所有人的任务都在看板后，这些任务的状态是需要有人更新的。
无论是专人更新，还是每个人自己更新，都会出现忘记更新，更新不及时的情况。这时，就可以顺势引入站会制度了。
每天上班的时候，或者每天下班的时候，所有人站到一起，花15分钟，说一下自己做了什么，准备做什么，所有人一起把看板更新了。

>>>>第三步，引入回顾会议当站会制度成熟后，就可以挑一个版本发布的日子。等版本发布后，把团队成员叫到一起，开一个回顾会。
让团队成员对这个版本开发的情况做个总结，同时可以让大家用便签把这个开发版本遇到的问题、不满写下来。
针对这些问题不满，大家一起讨论一些改进方案。

>>>>第四步，引入计划会议如果再开回顾会的时候，有人提出需求不清，拆解不够细致，工时估算不准之类的问题，
那你真是太幸运了。碰到这种情况，你顺势提出这个制度：每个版本开发前，产品经理要和团队人员开个会，
一起逐条对需求。产品经理要向团队解释每个需求，并且对团队提出的疑问进行解释和澄清。
开发团队要将需求分解成任务，估算工时，最终形成一个开发清单。

>>>>第五步，引入评审会议当计划会成功开过几次之后，就可以考虑引入评审会了。你可以在某个重大功能发布的时候，
把所有项目相关的人员召集起来，向大家展示团队做了哪些了不起的功能，也可以和大家讨论讨论还可以做哪些优化。

>>>>第六步，宣布引入Scrum当整个流程都跑顺以后，就可以在某次全体会议上，提出我们要实施Scrum了。
你需要任命PO、SM，对团队培训Scrum知识，讲解Scrum的价值观。

//-----------------------------------------------------

卡片

Scrum面板上的主要物品就是卡片。卡片会用来展示软件产品进度的不同元素，
从软件的发布到最细小的独立任务。为了清晰起见，不同类型的卡片应该有不同的颜色。
因为空间限制，Scrum面板通常只用来展示与当前冲刺相关的故事、任务、缺陷以及技术债务（technical debt）。

>>>特性 => 绿色的索引卡

每个发布由上一个发布的软件没有的若干个新特性组成。任何软件的版本1.0和版本2.0的最
显著的区别就是那些团队成员认为能够吸引新老用户购买软件或者升级包的新特性。


>>>用户故事 => 白色的索引卡

用户故事可能是绝大多数开发人员最熟悉的Scrum工件，但实际上它根本不是由Scrum定义和提出的。
用户故事最先是极限编程方法定义的工件，因为它在软件开发领域变得很常用，
因此Scrum方法后来也引入了它。用户故事需要通过下面的模板来声明。

“作为［某个用户角色］，我想要［做某种行为］，以便于［给这个用户角色带来某种价值］。”
上面模板中，方括号中的内容会因具体用户故事而有所不同。下面举个具体的例子来作进一步的解释。
“作为一个注册但未经验证的用户，我想要重置我的密码，以便于当我忘记密码的时候还能够再次登录系统。”

>>>任务 => 黄色的即时贴

任务是比用户故事还要小的工作项。可以把一个用户故事分解成多个容易管理的任务，然后
分配给多个开发人员并行开发。我倾向于在准备实现故事时再开始做任务分解，但是也有很多人
会在冲刺的计划会议时就完成了所有承诺要完成的故事的任务分解。


>>>技术债务 => 紫色或蓝色的即时贴

技术债务是个很有意思的概念，但是它也很容易被误解。它是个隐喻，用于描述在一个用户
故事生命周期内在架构设计和实现上所做的折中和妥协。本章后面专门有一节讲解技术债务。


>>>缺陷 => 红色或粉色的即时贴

如果某些完成的用户故事没有符合某些验收标准，就需要创建缺陷卡片了。这就要求有自动
化的验收测试：针对某个用户故事撰写的一组测试就形成了一个回归测试套件，可以用于保证后
续的工作不会破坏已通过验收的用户故事的实现。


所有的特性和用户故事卡片必须由产品负责人最终核实，而任务、缺陷和技术债务卡片则只应该由开发团队来核实。

//-----------------------------------------------------

泳道

在Scrum面板上，通过多个垂直线划分出了多条泳道。
每条泳道可以包含多个用户故事卡以表示相关故事在其开发生命周期内的进度。
典型的排列是从左到右的四条泳道：积压工作、开发、验收和完成。




//-----------------------------------------------------

实施敏捷开发会面临怎样的挑战

1.团队成员对变化的恐惧实施Scrum最大的挑战来自内部，来自团队对变化的恐惧。
每个团队在运营一段时间后都会形成固有的默契和习惯，引入Scrum必然会打破这种习惯。
这会让团队很不舒服，团队也会抵制，甚至是反抗。

而且实施敏捷的过程，一定不是一帆风顺的，尤其是实施敏捷的早期阶段，不仅不会对团队产生太大的价值，反而会引起混乱。
所以，在实施敏捷的过程中，千万要小心，每次只改变一点点，敏捷地完成敏捷。


2.组织人员的专业化水平敏捷并不会直接提高团队的专业化水平，反而对团队专业化水平有一定的要求。
必要的专业分工、合适的专业能力是必须的。敏捷会让开发整个流程持续运转，当某一个环节专业化能力出现问题的时候，
会极大地导致整个流程运转停滞。平时团队中的问题会在敏捷中快速暴露。一旦出现专业水平问题，要及时解决，补充人员，或者帮助其提高能力。
即使问题并不严重，也要在最短的时间解决，否则会影响团队对敏捷的信心。


3.产品经理这个组织Bug国内在实施Scrum的时候经常会碰到的问题就是团队中会有产品经理这个角色。

一般的处理方法是产品经理当PO，但PO是需要领导开发团队的。国内的产品经理往往不是技术出身，
领导开发团队会出很多问题，所以产品经理并不适合当PO。

另一种做法是产品经理做利益相关者，这种做法更不靠谱，利益相关者离团队太远，会出现无法及时响应的问题，
时间长了也会导致产品和开发之间关系冷漠，出现隔阂。

我们目前的做法是尝试是引入一个非官方版本的Scrum（Scrum 3.0），他将PO拆分成了业务拥有者（BO）和团队队长（TC）。
产品经理担任BO，开发经理担任TC，目前看效果还不错。我们还写了一个文档讲解Scrum 3.0，有兴趣可以了解一下。

//-----------------------------------------------------

实施敏捷开发
https://blog.mingdao.com/9355.html

敏捷开发实施流程 迭代周期： 2 ~ 3周

一、需求过程（1 - 2天）

 1.与产品经理，产品使用人员沟通产品功能与新需求
 2.程序经理完成需求整理与确认
 3.程序经理、开发经理、测试经理完成需求沟通
 
要求：

 » 控制需求范围，必须确保需求可提交
 » 严格控制工期，无特殊原因，延期不得超过2天；特殊原因根据影响评估延期时间
 » 需求确认需经过：“讲解 – 复述 – 确认”过程，规避需求理解偏差
 » 以原始需求列表为准，不做详细需求列表
 » 通过白板确认需求范围，并确定开发范围
 

二、开发过程（3 – 5天）

 1.开发经理确定开发任务点，并分配任务
 2.开发人员完成开发
 3.确保每日构建，并交付测试人员进行迭代测试，构建开始前开发经理通告提交功能范围
 4.每周五需提交BuildNotes（不做预构建），说明提交范围
 5.优先修复优先级为3以上的Bug，然后开展开发工作
 
要求：

 » 通过白板确认开发工期，并跟踪开发进度
 » 每日晨会跟进开发进度，汇报技术问题
 » 复杂任务分配时，通过“讲解 – 复述 – 确认”过程，规避需求理解偏差
 » BuildNotes直接从Git log中生成
 

三、测试过程（3 – 5天）

 1.测试经理确定测试任务点，并分配任务
 2.1 - 2天内完成测试用例编写，每周需提交TestNotes
 3.测试人员对每日构建包进行集中测试
 4.迭代阶段优先进行功能、效果测试
 5.效率测试可在基本功能完成后集中测试
 6.稳定性测试在在1 – 2个构建后尽快开展
 
要求：

 » 测试计划只给出时间点即可，不要求测试计划文档
 » 需完成测试用例编写，不要求测试策略编写
 » 晨会需通报严重问题
 » 稳定性测试需要尽量提前
 » 效率测试迭代阶段完成后集中测试
 

四、验收流程（1天）：

 1.完成功能测试后，提交产品经理与用户进行使用体验，并反馈新需求
 2.迭代周期内完成全部需求的功能、效果测试即可验收
 3.效率、稳定性指标在结项时验收
 
要求：

 » 包括功能、效果验收
 » 效率、稳定性在最后一个迭代进行验收
 » 程序经理根据验收反馈，收集需求并调整后续计划
 » 迭代版本验收通过邮件沟通并确认
 » 最终版本验收需包括测试报告


//-----------------------------------------------------


敏捷项目管理流程-Scrum框架最全总结！


Scrum中的角色

Scrum Master——项目负责人、项目经理
保护团队不受外界干扰，是团队的领导和推进者，负责提升 Scrum 团队的工作效率，控制 Scrum 中的“检视和适应”周期过程。
与 Product Owner 一起将投资产出最大化，他确保所有的利益相关者都可以理解敏捷和尊重敏捷的理念。

Team——开发人员、测试人员、美工设计、DBA等全职能性团队
团队负责交付产品并对其质量负责，团队与所有提出产品需求的人一起工作，包括客户和最终用户，并共同创建 Product Backlog 。
团队按照大家的共识来创建功能设计、测试 Backlog 条目交付产品。

Product Owner——产品负责人、产品经理、运营人员
从业务角度驱动项目，传播产品的明确愿景，并定义其主要特性。Product Owner 的主要职责是确保团队只开发对于组织最重要的 Backlog 条目，
在 Sprint 中帮助团队完成自己的工作，不干扰团队成员，并迅速提供团队需要的所有信息。

User——最终用户、运营人员、系统使用人员
很多人都可能成为最终用户，比如市场部人员、真正的最终用户、最好的领域专家，也可能是因其专业知识而被雇佣的资讯顾问。
最终用户会根据自己的业务知识定义产品，并告知团队自己的期望，提出请求。

Manager——管理层、投资人
管理层要为 Scrum 团队搭建良好的环境，以确保团队能够出色工作，必要的时候，他们也会与 Scrum Master 一起重新组织结构和指导原则。

Customer——客户、系统使用人员、运营人员
客户是为 Scrum 团队提出产品需求的人，她会与组织签订合同，以开发产品。
一般来说，这些人是组织中的高级管理人员，负责从外部软件开发公司购买软件开发能力。
在为内部产品的公司中，负责批准项目预算的人就是客户。

Scrum中的产出物
Product Backlog——Backlog 待开发项，积压的任务。
产品 Backlog 包括了所有需要交付的内容，其内容根据业务需求的价值顺序排列，
每个 Backlog 的优先级是可以调整的，需求是可以增减的，因此产品 Backlog 将根据不断增长来持续驱动维护。

Sprint Backlog——Sprint 本意为“冲刺”，指迭代周期，长度通常是一至六周。
在 Sprint 开始前，定义本次 Sprint 要讨论的“Sprint Backlog”，从中产生本次 Sprint 要完成的 “已定 Product Backlog”。
已定 Product Backlog是 Sprint 计划会议的产物，它定义了团队所接受的工作量，在整个 Sprint 过程中它将保持不变。

User Story、Task——用户故事、任务
用 User Story 来描述 Sprint Backlog 里的项目，User Story 是从用户的角度对系统的某个功能模块所作的简短描述。
一个 User Story 描述了项目中的一个小功能，以及这个功能完成之后将会产生什么效果，或者说能为客户创造什么价值。
一个 User Story 的大小和复杂度应该以能在一个 Sprint 中完成为宜。如果 User Story 太大，
可能会导致对它的开发横跨几个 Sprint，此时就应该将这个 User Story 分解。
为了能够及时，高效地完成每个 Story，Scrum 团队会把每个 Story 分解成若干个 Task。
每个Task 的时间最好不要超过8小时，保证在1个工作日内完成，如果 Task 的时间超过了8个小时，就说明Task的划分有问题，需要特别注意。

障碍 Backlog——问题列表，积压的待处理事务。
列举了所有团队内部和团队相关的和阻碍项目的进度的问题，Scrum Master 需要确保所有的障碍 Backlog 中的问题都已分配并可以得到解决。

通用会议规则
基本要求
•每次会议都要准时开始、准时结束。
•每次会议都采取开放形式，所有人都可以参加。

会前准备
•提前邀请所有必须参会的人，让他们有时间准备。
•发送带有会议目标和意图的会议纲要。
•预订会议所需的全部资源：房间、投影仪、挂图、主持设备，以及此会议需要的其他东西。
•会前24小时发送提醒。
•准备带有会议规则的挂图。

会议推进
•展开讨论时，会议的推进人必须在场。他不能参与到具体讨论中，但是他需要注意讨论进程，如果讨论参与者失去重点，他还要将讨论带回正规。
•推进人展示会议的目标和意图。
•有必要时，推进人可以商定由某个撰写会议记录。
•推进人可以记录团队的意见，或是教授团队如何自己记录文档；而且推进人可能会在挂图上进行记录，将对话可视化。
•推进人会对会议进行收尾，并进行非常简短的回顾。

会议输出
•使用手写或挂图说明来记录文档，给白板和挂图上的内容拍照。
•必须传达会议记录和大家对会议结果的明确共同认知。

让团队坐在一起！
•大家都懒的动，尽量让“产品负责人”和“全功能团队”都坐在一起！
•互相听到：所有人都可以彼此交谈，不必大声喊，不必离开座位。
•互相看到：所有人都可以看到彼此，都能看到任务板——不用非得近到可以看清楚内容，但至少可以看到个大概。
•隔离：如果你们整个团队突然站起来，自发形成一个激烈的设计讨论，团队外的任何人都不会被打扰到，反之亦然。

团队建设
•Scrum 团队最佳人数控制在“5～9”人。
•全职能性团队：开发组（后台开发、前端开发、测试人员——3~8人）、Scrum Master（项目经理）、产品负责人
•兼职团队成员：美工、DBA、运维


每日立会（Daily Standup Meeting）——建议下班前开始
会议目的
•团队在会议中作计划，协调其每日活动，还可以报告和讨论遇到的障碍。
•任务板能够帮助团队聚焦于每日活动之上，要在这个时候更新任务板和燃尽图。

构成部分
•任务板、即时贴、马克笔
•提示：ScrumMaster 不要站在团队前面或是任务板旁边，不要营造类似于师生教学的气氛。

基本要求
•成员：团队、Scrum Master
•无法出席的团队成员要由同伴代表。
•持续时间/举办地点：每天15分钟，同样时间，同样地点。
•提示：团队成员在聆听他人发言时，都应该想这个问题：“我该怎么帮他做得更快？”

会议输出
•团队彼此明确知道各自的工作，最新的工作进度图。
•得到最新的“障碍 Backlog”
•得到最新的“Sprint Backlog”

会议过程
•团队聚在故事板旁边，可以围成环形。
•从左边第一个开始，向团队伙伴说明他到现在完成的工作。
•然后该成员将任务板上的任务放到正确的列中。
•如果可以的话，该成员可以选取新的任务，交将其放入“进行中工作”列。
•如果该成员遇到问题或障碍，就要将其报告给 Scrum Master。
•每个团队成员重复步骤2到步骤5。

每个人三个问题：
•上次会议时的任务哪些已经完成？：把任务从“正在处理”状态转为“已完成”状态。——今天完成了什么？
•下次会议之前，你计划完成什么任务？：如果任务状态为“待处理”，转为“正在处理”状态。
如果任务不在 Sprint Backlog 上，则添加这个任务。如果任务不能在一天成，把这任务细分成多个任务。
如果任务可以在一天内完成，把任务状态设为“正在处理”。如果任务状态已经是“正在 处理”，询问是否存在阻碍任务完成得问题。——明天做什么？
•有什么问题阻碍了你的开发？：如果有阻碍你的开发进度的问题，把该障碍加入到障碍 Backlog中。——今天遇到了什么问题？

注意事项
•不要迟到
•不要超出限制时间
•不要讨论技术问题
•不要转变会议话题
•不要在没有准备的情况下参加
•Scrum Master 不要替团队成员移动任务卡片，不要替团队更新燃尽图。
•Scrum Master 不要提出问题，团队成员不要向 Scrum Master 或管理层人员报告。
•如果不能出席会议，需要通知团队，并找一名代表参加。



任务板
•任务板集合了选择好的 Product Backlog 和 Sprint Backlog，并以可视化方式展示。
•任务板只能由团队维护，使用不同颜色的“即时贴”来区分开发人员，或者在“即时贴”写上接受任务的姓名。
•尽量使用大白板，也可以使用软件。

任务板有4列：
•选择好的 Product Backlog：按照优先级，将团队在当前 Sprint 中要着手的 Product Backlog 条目或是故事放在该列中。

•待完成的任务：要完成一个故事，你得完成一些任务。在 Sprint 规划会议中，或是在进行当前 Sprint 中，
收集所有特定 Backlog 条目需要完成的新任务，并将它们放入该列。

•进行中的工作：当团队成员开始某个任务后，他会将该任务对应的卡片放到“进行中的工作”列中。
从上个每日 Scrum 例会开始，没有完成的任务都会放在该列中，并在上面做标记（通常是个红点）。
如果某个任务在“待完成任务”列中所处时间超过一天，就尽量将该任务分为更小 的部分，然后把新任务放到那一列，
移除其所属大任务卡片。如果一个新任务因为某个障碍无法完成，就会得到一个红点标记，Scrum Master 就会记下一个障碍。

•完成：当一个任务卡完成后，完成此任务的成员将其放入“完成”列，并开始选取下一张任务卡




燃尽图
•跟踪进度要由团队来完成，燃尽图的横轴表示整个Sprint 的总时间，纵轴表示 Sprint 中所有的任务，其单位可以是小时，人天等。
一般来说，燃尽图有”Sprint燃尽图”和”Release燃尽图”之分。

•团队每天更新燃尽图。
•如果燃尽图一直是上升状态，或当 Sprint 进行一段时间之后，Sprint 燃尽图上的Y值仍然与 Sprint 刚开始时相差无几，
就说明这个 Sprint 中的 Story 过多，要拿掉一些 Story 以保证这个 Sprint 能顺利完成。 
如果Sprint 燃尽图下降得很快，例如 Sprint 刚过半时Y值已经接近0了，则说明这个 Sprint 分配的任务太少，
还要多加一些任务进来。在 Sprint 计划会议上，如果团队对即将要做的任务理解和认识不充分，
就很可能导致这两种情况的出现。（锻炼团队人员的自我估算时间）
•燃尽图要便于团队更新，没必要让它看起来很炫，也不要过于复杂，难以维护。

Release 燃尽图：记录整个Scurm项目的进度，它的横轴表示这个项目的所有Sprint， 纵轴表示各个Sprint开始前，
尚未完成的工作，它的单位可以是个（Story 的数量），人天等。




Sprint规划会议——第一部分（上午）
会议目的
•该会议的工作以分析为主，目的是要详细理解最终用户到底要什么，产品开发团队可以从该会议中详细了解最终用户的真实需要。
在会议的结束，团队将会决定他们能够交付哪些东西。
•产品负责人在会前准备：条目化的需求（用户故事），优先级排序，最近1~2个迭代最希望看到的功能。
会前准备至关重要，可帮助产品负责人理清头绪，不至于在迭代期内频繁提出变更、增加或删除故事。

基本要求
•迭代计划会在每个迭代第一天召开，目的是选择和估算本次迭代的工作项。
•只有团队成员才能决定团队在当前 Sprint 中能够领取多少个 Backlog 条目的工作。

构成部分：
•经过估算和排序的 Product Backlog。
•挂图、马克笔、剪刀、胶水、即时贴、白板、铅笔和蜡笔。
•假期计划表、重要人员的详细联系信息。
•参会成员：团队成员、Scrum Master、产品负责人

持续时间：在 Sprint 中，每周该会议占用时间为 60 分钟，在早上召开该会议，这样还有可能在同一天召开 Sprint 规划会议的第二部分。

会议输出
•选择好的 Product Backlog 条目。
•各个 Backlog 条目的需求。
•各个 Backlog 条目的用户验收测试。

会议过程
•从第一个 Product Backlog 条目（故事）开始。
•讨论该 Product Backlog 条目，以深入理解。
•分析、明确用户验收测试。
•找到非功能性需求（性能、稳定性...）
•找到验收条件。
•弄清楚需要“完成”到何种水平。
•获得 Backlog 条目各个方面的清晰了解。
•绘制出所需交付物的相关图表，包括流程图、UML图、手绘草图、屏幕 UI 设计等。
•回到步骤1，选取下一个 Backlog 条目。

流程检查：询问团队能否快速回答下列问题，只需要简要回答即可：“我们能在这个 Sprint 中完成第一个 Backlog 条目吗？”
如果能得到肯定的回答，那么继续询问下一个 Backlog 条目，一直到已经分析完的最后一个 Backlog 条目。
——接下来，休息一下。在休息后，对下一个 Backlog 条目展开上述流程。

结束流程：
•在 Sprint 规划会议第一部分结束前留出 20 分钟。
•再次提问——这次要更加严肃、正式：“你们能否完成第一个 Backlog 条目，...第二个，...？”
•如果团队认为他们不能再接受更多的 Backlog 条目，那就停下来。
•现在是非常重要的一步：送走 Product Owner，除了团队和 Scrum Master 之外的所有人，都得离开。
•当其他人都离开后，再询问团队：“说真的——你们相信自己可以完成这个列表？”
•希望团队现在能短暂讨论一下，看看他们到底认为自己能完成多少工作。
•将结果与 Product Owner 和最终用户沟通。

注意事项：不要改变 Backlog 条目大小，不要估算任务。




Sprint规划会议——第二部分（下午）
会议目的
•该会议的工作以设计为主，产品开发团队可以为他们要实现的解决方案完成设计工作，
在会议结束后，团队知道如何构建他们在当前 Sprint 中要开发的功能。

基本要求
•只有产品开发团队才能制定解决方案，架构师或其他团队之外的人只是受邀帮助团队。

构成部分：
•能够帮助团队在该 Sprint 中构建解决方案的人，比如厂商或是来自其他团队的人员。
•选择好的 Product Backlog 条目。
•挂图......

注意事项：不要估算任务，不要分配任务。

会议输出
•应用设计、架构设计图、相关图表
•确保团队知道应该如何完成任务！

会议过程
•从第一个 Backlog 条目开始。
•查看挂图，确定对于客户的需求理解正确。
•围绕该 Backlog 条目进行设计，并基于下列类似问题： •我们需要编写什么样的接口？
•我们需要创建什么样的架构？
•我们需要更新哪些表？
•我们需要更新或是编写哪些组件？
•......

当团队明确知道自己应该如何开发该功能后，就可以转向下一个 Backlog 条目了。
在会议的最后 10 分钟，团队成员使用即时贴写出初步的任务。
这能帮助团队成员知道接下来的工作从哪里开展，将这些任务放在任务板上。

持续时间：在 Sprint 规划会议第一部分完成后，召开该会议。
可以将午餐作为两次会议的一个更长久的休息。
但是要在同一天完成 Sprint 规划第一部分，在 Sprint 中，每周该会议占用时间为 60 分钟。




估算会议——根据项目情况合并到Sprint第二部分会议
会议目的
•要做好战略规划，你需要知道 Backlog 中各项的大小，这是版本规划的必要输入；
如果想知道团队在一个 Sprint 中能够完成多少工作，这个数据也是必须的。
•团队成员可以从会议中知道项目接下来的阶段会发生哪些事情。

基本要求
•只有团队才能作估算，Product Owner（产品负责人）需要在场，以帮助判定某些用户故事能否拆分为更小的故事。

构成部分：
•Product Owner 根据业务价值排定 Product Backlog 各项顺序。
•需要参加的人员：Team、Product Owner、User、Scrum Master

注意事项：
•不要估算工作量大小——只有团队能这么做。
•Product Owner 不参与估算。

会议过程
•Prodcut Owner 展示她希望得到估算的 Product Backlog 条目。
•团队使用规划扑克来估算 Backlog 条目。
•如果某个 Backlog 条目过大，需要放到下一个或是后续的 Sprint 中，
团队就会将该大 Backlog 条目划分为较小的几个 Backlog 条目，并对新的 Backlog 条目使用规划扑克进行估算。
•重新估算 Backlog 中当前没有完成、但是可能会在接下来三个 Sprint 中要完成的条目。

持续时间：该会议时间限制为不超过90分钟。如果 Sprint 持续时间长于一周，那么每个 Sprint 举行两次估算会议比较合适。

会议输出
•经过估算的 Product Backlog。
•更小的 Backlog 条目。


扑克牌估算
具体步骤：
•每个人各自估算后独立出暗牌，听口令一起开牌。
•数值最大者与最小者PK，其他人旁听也可参考。
•讨论结束后重新出牌和开牌。
•重复上述过程，直到结果比较接近。

常见问题

1、为什么任务要分给组而不是个人？
答：因为怕出错了牌又说不出所以然，这样即使日后他不做这个功能，也对这个功能很了解。

2、为什么不让最后领任务的人自己估算？
答：因为他很可能因为不知道某代码可用、不知道某软件不行....而选择了错误的实现方法。

3、为什么不让师傅估算大家采纳，他不是最厉害吗？
答：师傅的想法常常是徒弟们理解不了的，比如为什么不留在女儿国而偏偏去西天取经之类的，
共同估算就是让大家在思考中对照自己的实现方法和师傅差异的过程。


Sprint评审会议（Review Meeting）
会议目的
•Scrum 团队在会议中向最终用户展示工作成果，团队成员希望得到反馈，并以之创建或变更 Backlog 条目。

基本要求
•Sprint 复审会议允许所有的参与者尝试由团队展示的新功能。

构成部分
•有可能发布的产品增量，由团队展示。

会议输出
•来自最终用户的反馈。
•障碍 Backlog 的输入。
•团队 Backlog 的输入。
•来自团队的反馈为 Product Backlog 产生输入。

持续时间：90分钟，在 Sprint 结束时进行。

会议过程
•Product Owner 欢迎大家来参加 Sprint 复审会议。
•Product Owner 提醒大家关于本次 Sprint 的目的：Sprint 目标、Scrum 团队在本次 Sprint 中选定要开发的故事。
•产品开发团队展示新功能，并让最终用户尝试新功能。
•Scrum Master 推进会议进程。
•最终用户的反馈将会由 Product Owner 和/或 Scrum Master 记录在案。

注意事项：
•不要展示不可能发布的产品增量。
•Scrum Master 不要负责展示结果。
•团队不要针对 Product Owner 展示。



Sprint反思会议（Retrospective Meeting）
会议目的
•该会议的对应隐喻：医疗诊断！其目的不是为了找到治愈方案，而是要发现哪些方面需要改进。

构成部分
•参与人员：团队成员、Scrum Master

基本要求
•从过去中学习，指导将来。
•改进团队的生产力。

注意事项
•不要让管理层人员参与会议。
•不要在团队之外讨论找到的东西。

会议输出
•障碍 Backlog 的输入。
•团队 Backlog 的输入。

持续时间：90分钟，在 Sprint 评审会议结束后几分钟开始。

会议过程
•准备一个写着“过去哪些做的不错？”的挂图。
•准备一个写着“哪些应该改进？”的挂图。
•绘制一条带有开始和结束日期的时间线。
•给每个团队成员发放一叠即时贴。
•开始回顾。
•做一个安全练习。
•收集事实：发放即时贴，用之构成一条时间线。每个团队成员（包括 Scrum Master）在每张即时贴上写上一个重要的事件。
•“过去哪些做的不错？”：采取收集事实同样的过程，不过这次要把即时贴放在准备好的挂图上。
•做一个分隔，以区分“过去哪些做的不错”和接下来要产出的东西。
•“哪些应该改进？”：像“过去哪些做的不错”那样进行。
•现在将即时贴分组：
•我们能做什么》团队 Backlog 的输入。
•哪些不在我们掌控之内？》障碍 Backlog 的输入。
•根据团队成员的意见对两个列表排序。
•将这两个列表作为下个 Sprint 的 Sprint 规划会议第一部分和 Sprint 规划会议第二部分的输入，并决定到时候要如何处理这些发现的信息。


//**************************************************************************************************


以“用户故事”驱动的项目开发流程

以“用户故事”驱动的项目开发流程，共分为九个阶段：

1.机会阶段: 筛选想开发的内容
2.探索阶段: 讨论、明确“机会”的方向（设计、技术等），形成待开发清单
3.设计阶段: 探索阶段之后，设计师通过设计方法，进行具体方案的设计和验证
4.故事工作坊阶段:讨论细节，进行开发展展面的故事折分，并对各小模块的验收标准达到共识
5.开发阶段: 通过不断获筛信息、讨论并反馈，不断调整方案，并更新用户故事地图
6.评估阶段: 多次的阶段性评估，评估每一份产品模块，并调整计划与进度
7.测试阶段: 拿有意义的工作软件模块给用户测试，并从中获得反馈
8.展示阶段: 利用总结会议，向利益干系人（包括老大）展示产品
9.验证阶段: 运用数据和直接接触用户，来真正了解结果是否达到预期

//**********************************************

第一阶段：机会阶段

一个好的的故事对话是一个概要性的3W（who-what-why）的讨论。大目标是制定一个通过或不通过的决策。
通过并不意味着我们要投入开发。它意味着我们会继续开展更为深入和多样化的讨论来真正理解这个故事。
但是，如果我们发现从一开始这个想法就很糟糕，就不会继续花很多时间。
不通过是对“垃圾”的礼貌。所以，我们也可以称之为继续/抛弃决策。
总是有太多的东西需要开发，而在一个普通的机会浪费每个人太多时间前干掉它，当然是值得庆贺的。

什么是“机会”？它是人们对产品的初步想法、规划，是以故事卡片的形式记录的。
说白了，就是一个想法、“我觉得XXX可行”中的那个“XXX”、老板拍脑袋出来的那个点子。
如上面文章摘要所说，为了明确机会（很多时候人们也把早期的想法叫需求）的正确性，
必须明确它的三个内容（3W）：who（满足谁的需求）、what（用户会用产品做什么）、why（用户期待从中获得什么收益），
见《纸上谈兵：用户故事地图（3）》。若其中一点没想明白，虽然不能说它是个“伪需求”，但起码也是一个暂不值得、容易浪费大家时间的点子。


在这一阶段的实际操作中，按顺序分为4个步骤：

1. 收集大家对产品的想法（机会）

我常问设计师“你知道什么是‘交互设计师’吗？”通过这个问题，可以帮助我们不断深化对职业的认识。
在这里，想特别提一点书中对“产品经理”的表述——“产品经理需要收集需求（机会）并验证真假”，“产品经理的工作是收集并实现想法，
而非全部靠自己的想法。最大挑战是，接纳别人的想法并当成自己的创新来实现。并在此过程中证明它靠谱或不靠谱”。
这段描述说明了“产品”的另一种产品方式。它不是实现某个人的想法，也并不会始终以某个人的想法为准。
协作输出需求，也是“产品”的正确打开方式。


2. 使用故事卡形式记录机会

大家提的机会，需要以故事卡片的形式来记录。在书写（电子编辑）卡片时，它的内容包括标题、详细内容。

标题：必须是动词短语。这种形式有助于我们从用户角度来思考；
详细内容：包含4W1S。
WHO：目标用户是谁；
WHY1：我们为什么需要它；
WHY2：用户为什么需要它；
WHAT：进一步的构想是什么；
SIZE：直觉上的估算；

收集机会的产品可能是未上线、刚立项的产品，也可能是已上线、已有用户在使用的产品。

刚立项产品

对于新的产品，根据产品假想的关键行为流程，将获得的机会分别放在对应的关键行为分类下。
在这一过程中，就是在进行一致意见的讨论和达成，其结果就是将故事讲完整。

每个产品都会覆盖不同细分的用户群体。那么如何区分、定义产品的用户，以管理针对不同用户的机会呢？
当发现机会指向不同用户群时，我们可以用卡片列出所有用户。
然后针对这些用户讨论以下问题：1)得到的好处；2)使用动机；3)使用方式；4)需要功能。
通过以上讨论，从这些用户中选择并满足一个即可

已上线产品

对于已上线的产品，使用“用户旅程图”（用户使用产品的关键行为流程），则可以帮助我们发现和管理机会。
以地图的方式展示现有用户操作流程，以做为机会的背景。
将每个机会分别放置在地图对应位置，最终将会看到用户痛点集中在哪个环节。
另外，还可以增加用户抱怨和喜欢的功能（卡片），以保持整个地图的平衡。


3. 找出可以进入详细讨论（下一阶段）的机会

早期收集到的机会的数量一般非常多。如何从中选择合适合理的需求进入下一阶段，且高效利用有限的时间，就显得十分必要。
在这一环节，需要产品人员、体验设计人员共同讨论、筛选机会。对于机会，只有做或不做的结果。
“没它无法工作”就做，否则就不做。当机会无法快速决策时，也可以使用“机会画布”来帮助理解机会。
这一方法会在下文介绍。对于不做的机会，有几种可能：

3.1.进一步了解：没有足够的信息做出通过或不通过的决定
3.2.推迟决策：当前暂时无法做出通过或不通过的决策
3.3.废弃：所有人均不看好的机会

需要注意的是，在这一环节只讨论整体，不讨论细节。
在讲解自己的想法时，可以一边指着卡片一边讲。
在讨论过程中若产生新的机会，也需要随时记录下来。


4. 传达结果
对于那些没有参与讨论的人，可以通过口述的方式向他们传信息
（这一点不是很清楚，可能像《3A思维》那样，是出于对提出机会但未通与的人的一个礼貌性的回复）。

通过以上四个步骤，将会获得一份清单——进入下一（探索）阶段进行讨论的机会清单。


机会画布，是评估刚起步业务的有效方法，它也可以用于评估产品机会。
它以空间的形式组织信息，通常比较大，而且都是在一个地方呈现所有信息。



额外,机会画布的内容包括以下几点：

1.问题和想法：为用户解决问题的产品、功能或优化想法。以及如何为用户或客户解决当下哪些问题？

2.用户或客户：方案针对谁而设计。探索用户目标和用户行为在使用产品过程中的差异，并根据这些差异将用户和客户分为不同的类型。
不要把所有人都列为产品的目标用户，不解释为什么。

3.现有的解决方案：竞品，或用户为满足需求而采取的变通方式；

4.用户价值：用户使用新方案获得的收益；

5.用户度量：能反应用户接受新方案的行为；

6.接受策略：客户与用户如何发现和接受你的方案；

7.业务问题：新方案中，需要解决的业务问题；

8.业务度量：新方案会影响哪些业务绩效指标；

9.预算；探索、开发和改进你提议的方案，需要哪些预算和开发成本。

针对以上九点，与团队逐一讨论。若某项没有结果，则可以先写下假设。
通过这一方法，可以更全面的了解机会，且找到各项之间的关系，但最终结果依然是由产品负责人决定。


讲到这里，第一阶段的内容就都表述完了。在所有内容中，对我启发特别大的有两点内容：

1)裁剪需求的标准是“没有它无法工作”；
2)竞品不只来自第三方产品，也包括用户为满足需求而采取的变通方式。



//**********************************************

第二阶段：开发流程之“探索”阶段

当我们收集了大量用户故事进入机会阶段，并且根据3W方式筛选出“用于进一步讨论”的部分后，我们将带着这些用户故事，进入“探索阶段”。
在这一阶段，我们的任务是讨论、明确这些用户故事在技术和设计侧的方向，最终形成待开发清单。

在探索阶段，要详细讨论谁会用、为什么要用以及怎样使用你的产品。
团队的目标是构思一个有价值、有用、可行的产品。这时要做许多碎石的工作。
只需要将最少数量的故事推入发布待办列表中，这些列表描述了一个最小可行产品版本。

这一阶段的目的是将讨论、明确“机会”的可行性方向，选择其中合适的部分组成待开发清单。这一阶段共有五个步骤。
 

1. 重新阅读并理解“机会”信息
这里不再赘述，因此为了更好的进行机会探索，需要对“机会”进行复习。回顾它们的3W信息。


2. 深入理解用户
“人物画像”是我们理解用户的方法，而“用户旅程图”则帮助我们理解用户行为，快速建立对用户和遇到问题的共识。

提到“人物画像”总感觉是很高深的内容。然而似乎并非如此，简单的用户画像方法也可以帮助我们很好的接近用户。
你需要和团队一起明确、完成以下几个部分：

2.1.画出简单的人物素描（照片也行）；
2.2.基础信息：包括“Ta是谁？”、“Ta为什么要使用我们的产品？”
2.3.关于Ta：特点、目标&痛苦点、活动；
2.4.启示：“对Ta有什么价值？”、“这个方案能改变Ta的理由？”

“用户旅程图”可以做为脑暴解决方案的跳板，也可以通过它来验证自己心仪的解决方案是否真的可以解决问题。
在用户原有行为路径中，去看它的“事件”、“观察”、“痛点”和“快乐”。此方法网络上有大量资料，这里不再赘述。


3. 快速可视化方案，进行逻辑、技术可行性评估
在回顾机会、理解用户及行为的过程中，解决方案会逐渐浮出水面。
做为交互设计师，应该具体基础的手绘能力，能在会议中将大家说出来的方案快速在白板上还原——它将大大提升方案输出的速度，
并在共创中快速达成共识。除了界面草图，用户画像、流程图、照片和文字描述都是不错的方案呈现方式，
唯一重要的是（此处敲黑板），快速的、将它们呈现在所有人都可以轻易看到的地方。

将可视化呈现的方案草图和故事地图（为什么要加入地图？后面会解释）放在一起，
与参会的技术人员、设计师进行沟通，将能够快速获得专业建议，发现技术风险。
减少“先需求后评审”带来的成本和时间浪费。
在讨论过程中，我们可以使用“如果……会（怎样）”的语句来不断推敲方案、填补漏洞。
这一过程中，会谈到硬件条件、数据情况、后台服务等内容，请确保自己对所有事情都做了笔记。后面你就会知道它们有多重要。

也许有人会有疑惑，为什么要在这里加入机会所在的故事地图？
因为在开发过程中，我们易于关注有趣的功能而忘记在这期间的基本流程。
然而机会所在的整个地图帮忙我们补充和记忆这些细节和过程。
通过地图，能从全局角度发现技术限制。


4. 针对上述内容，重新校正用故事内容
在探索阶段的讨论过程中，具体应该讨论什么？哪些是必要或重要的？
下表做为一个清单，也许可以帮助我们尽可能做好探索阶段的任务，试着让探索阶段讨论的内容包括以下内容。


标题		说明
产品角色	1)讨论不同类型的用户：在产品中，这个功能的用户包括哪些细分用户；
			2)有哪些其他干系人；
			3)若为企业软件，它的客户是怎样的；
			
使用原因	1)为什么特定的用户会关注这些功能

使用场景	1)用户何时使用；
			2)使用时的现实场景是什么；
			
功能内容	1)用户希望通过软件来做的事情；
			2)可将调用某不为人知的系统视为特殊用户;

方案实现	1)有品质的讨论需要关注：为什么做、做成什么、怎么做；
			2)没有明确谈到如何实现，就很难评估其实现成本；

问题与假设	1)对技术假设发问：需要依赖的底层系统是什么；是否已了解这些系统的工作原理；还需关注的其他技术风险；
			2)对产品假设发问：用户会接受这个方案吗？真的理解用户吗？它真是用户需要的的吗？是用户痛点吗？

异常情况	1)有哪些异常情况出现；
			2)出现异常时，用户是否有其他方式完成任务；
			
开发周期	1)随着讨论的进行，逐渐主准确出开发时间（xx天）；
			2)根据开发周期的结果，判断是否中止开发或是继续；
			
其他方案	1)丢掉文案中的部分假设，回到解决问题上来，找到最小成本、更有效的解决方案


5. 去掉低优先级的内容，保留必要内容进入下一阶段
当有多人参与讨论的时候，为了让每个人都满意，往往会以得到一个巨大的解决方案。
这显示有违初衷。如果决定开发的故事数量最后大于“放弃开发的故事数量”，往往说明探索阶段没有做对。


总结:
在探索阶段留下来的用户故事，将会进行产品原型的设计和细节讨论。
探索阶段是从产品和用户层面来检测、过滤用户故事（我们在实际过程中一概称“需求”），我们在这一阶段的关注点优先顺序是：
优先关注“优先满足的业务目标、用户群体”，然后再关注他们的需求中“优先满足的那部分”，最后再“根据需求，排列功能的优先级”。

探索阶段之所以重要，是因为它实际解决了成本问题。
例如需求方担心会议效率低，不能快速输出结果，自己就直接把需求写完了。
然而有时思考片面、知识结构受限，常会产出低质量、在需求会中被推翻的需求。
若这个需求输出的过程中邀请各岗位重要人员参加（人数要限制在5人以内），
不仅可以在前期就得到专业的反馈，同时还能突破单一的视角，为方案带来更多的可能性。

将早期的用户故事（需求）确认环节分为“机会”、“探索”两个阶段，
看似是增加了环节，实际上却是有效控制流入后续阶段的需求质量，从整体上降低了协作成本和需求风险。
毕竟也不是每个阶段，都需要所有人参加。

//**********************************************

第三阶段：开发流程之“设计”阶段

设计思维

设计思维的实践方法共有5个阶段，分别是：移情、定义问题、形成想法、制作原型和测试。

1.移情：走到使用场景中去，与使用者交谈，收集用户对产品的实际感受，并且收集信息；

2.定义问题：为假想的用户创建一份用户画像，并将实际得到的信息融入到这个画像中形成案例，使用地图来绘制用户当前的行为。
这一过程也是对上一阶段采集到的信息达成共识，找到隐藏在背后真正的问题；

3.形成想法：根据上一环节的内容，找到解决方案。可以使用二种方法；

3.1.头脑风暴：除了传统的脑暴方法，这里也可以使用“故事地图”辅助脑爆：
在卡片或便签上直接写下对解决方案的想法，然后将它们直接放至最相关的位置。
用一个表现痛点、快乐及其他用户信息的地图。针对这个地图进行脑暴，广泛收集想法。

3.2.设计工作室：具体使用方法见下文。

4.制作原型：针对几种方案制作简单的原型，并保证其具有一定的保真度；

5.测试：将原型拿给用户看，是否真能解决他们的问题，并获得反馈。最终找到最合适的方案。

设计思维强调小型的多学科团队协作，团队成员通过制作简单模型、草图和低保真的文档来进行交流。
设计思维帮助我们真正理解“解决什么问题”，而不是我们认为的“要去解决什么问题”。

然而，设计思维并非万能或一定可以成功，设计思维最大的缺陷是花太多时间在前期设计和分析，
从而对方案产生很强的依赖（这也是理想化设计的通病），一但结果不如人意，就会对设计过程产生质疑。
其实大可不必如此，按照幂律分布，实际开发出来的东西中失败和成功的分别占20%，还有60%说不上成功或失败，基本上无用的。
此外，进入市场的功能也很有可能收不到用户能用或不能用的反馈。

//**************

验证性学习过程

做为交互设计师至今，随着对实际产品设计环境理解的不断加深，我渐渐明白，一套严谨的设计流程固然可贵，
但是要想在有限的时间和资源前提下快速获得方案，这种基于严谨流程的方法论必然会碰壁。
一套结合实际开发流程、契合国人快（急）速（功）验（近）证（利）的期待，必须要从其他方面找方法，于是我碰到了“敏捷思想”。
无独有偶，《和户故事地图》中也提到设计思维的弊端，从而提出了另外一种设计思想“验证性学习过程”——“开发-度量-认知”模型。

开发：尽可能做最小可行实验，用以验证设计方案的可行性；
度量：从访谈、可行性测试和软件使用中进行真接观察和数据分析；
认知（学习）：根据收集到的信息，重新思考设计方案，重新形成新的解决方案。

它的具体过程是：

1.获得信息：与其他伙伴（与用户直接打交道）共同讨论，获得目标用户和他们可能面临的问题；
2.找到事实：通过讨论，为猜测的用户和问题找出真实的原因和事实；
3.构建方案：构建多个解决方案，并将其聚合为最好的1〜2个解决方案；
4.找到风险：基于聚合的方案，猜测用户如何使用方案以及技术风险，并找到其中影响最大的几个风险；
5.开发原型：设计和开发小型测试，做出一个最基本的能表达方案的原型（可以使用设计连环画，这是我很感兴趣的方式）；
6.测试原型：使用原型，对用户进行测试，验证问题的存在以及方案可行性；
7.分析结果：测试结束后分析结果，若设计之初假想的方案是错的，则根据已知信息和新的猜测，进行下一轮测试；

//**************

设计工作室

设计工作室是一人快捷的、协作式获得想法的方法。它的方法大致是这样的：

1.邀请8〜12个人，你认可他们的想法，并且希望他们能帮助你改善产品；
2.描述你正在解决的问题，它的背景、机会和探索的信息，但不要说太多，防止影响他们的想法；
3.选择性的分享一些同类产品的案例，或者其他借得借鉴的产品功能设计；
4.每个人根据已有的信息绘制草图，可以限定时间；
5.每4个一组进行小组分享，时间为30分钟。教练对每个人方案解决问题的程度给出反馈，并指导他们如何融合其他人的想法；
6.要求每个小组综合得出最优秀的想法，并输出一个组织好的解决方案，这个过程通常需要15〜30分钟；
7.以小组为单位，向所有人分享想法，并展开讨论；
8.收集他们的草图和想法，团队成员用这些资料最终创建一个最终的、进行充分整体的草图。

//**********************************************

第四阶段：开发流程之“故事工作坊”阶段

从各方收集到的需求（用户故事），经过了机会阶段的初步筛选、探索阶段的设计与开发侧的可行性评估，以及设计方案的实现和验证。
接下来，将会进入团队共同参与的故事工作坊（在我看来就是项目需求评审会，以下均称为“评审会”），它也称为最后一次最佳参与的机会。

这一阶段主要讨论细节，其目标有2点：

1.基于开发层面拆分需求为小模块，以制定后续开发任务的迭代计划；
2.对开发的各个小模块达成一致的验收标准；

//**************

准备阶段

首先，在会议开始前要选择粒度合适的故事进入评审，清楚这些需求必要的细节，如有必要可以提供多种方案来进行评估。

提前邀请开发团队、其他利益相关人士等进入会议，例如开发人员、测试人员、体验专家、视觉相关设计师，总数在3~5为益。
为保证会议效率，会议人员不益过多（我们都经历过又臭又长的会议）。
然而，在同一场会议中，在不同阶段可能需要不同的人参与。
这里介绍一个“金鱼缸协作模式”，可以保证让更多人参与，同时降低人数太多造成的影响。

具体如上图。参与讨论的3〜5个人聚集在白板前讨论——他们就是鱼缸里的金鱼。
处于鱼缸（上图中的圈）外面的人只能看，不能讲话。鱼缸外的人要想参与讨论，必须与鱼缸里的人互换才行。

待上述内容准备就续后，接下来正式进入评审会。

//**************

执行阶段

1.与所有人一起，再次了解故事的大体情况

与前几个阶段一样，会议开始时候我们依然需要讲清楚3W（what、why、who）信息。
有时候我们会认为团队成员不关心产品，只完成自己应该做的内容，不会从整体考虑。
但我认为真实的原因是，项目并没有创造让成员们关心产品的环境，需求来源往往下意识认为其他人执行即可，不需要了解太多背景信息。
同时也为了节省时间，会在评审会时直接讲解需求内容。这恰恰剥夺了成员们了解产品的机会。
由此可见，讲清楚每个需求的3W信息（特别是why）非常必要。

在会议中，所有人通过讨论和交流，明确几个内容：

用户是谁？
他们是如何使用产品的？
功能完成后看起来应该是怎样的？
我们要如何开发这些功能，他们的工作原理（业务逻辑、数据等）是怎样的？

在讨论方案过程中，尽量以用户视角来讨论，例如“用户在做什么”、“用户接下来会看到什么”。
若遇到产品内部逻辑时候，可以使用“数据是如何输入的”这样的表述方式，更容易被所有人理解。

会议中随时记录大家的想法和点子。
非常建议借助一些道具来记录，例如白板、挂图、便利贴等，这样即可以防止信息被蒸发，也可以让大家都看到所有内容。
（近期看了一本书《设计冲刺》，同样倡议使用这样的方法）。


2.分组讨论

待所有人了解了功能的大概内容和运行原理之后，接下来要将参与人员分组，
尽量保证每个小组有测试人员、开发人员、体验设计师或需求人员。
各组用固定时间，制作出这些用户故事的开发计划（估时）。


3.小组间分享计划和估时

每个小组分享他们制定的开发计划（不要讲细节），在此期间，需要指出开发功能的问题和改进点，并估算开发时间。
对很多人来讲，估算开始时间有时候是不太可能的。
我猜测主要是对待开发内容和原有产品运行机制不了解导致：未知=不可估。
而用户故事地图的过程，可以帮助大家对功能开发内容达成一致性的理解。
此外，还可以将相似规模需求的实际开发时间做为样本，以让开发时间估算尽量接近于真实值。
而对于这一点，则需要我们对已投入的开发时间进行记录，尽可能将大的计划切分为小的部分，这样就可以获得更多度量的机会。
度量越频繁，统计的时间结果越接近于真实值。

会议人员需要对上述开发决策和另外一项内容达成共识。
“另外一项内容” 是指，验证功能开发完成的最低标准
（换句话说，就是一起评审软件时，应如何展示开发的内容，例如按用户操作流程，保证这个流程可以走通）。
对验收标准的讨论，可以揭示如何进行工作分解。我们可以开发分解后得到的故事，并进行及时的检查和调整。

//**************

异常情况

用户故事工作坊的效果可能不会理想（开过需求评审会的同学应该深有体会），有几点原因可能会导致这一情况的出现：

不能从功能和技术角度考虑方案，整个会议过程都在务虚；
大家只关注如何完成功能，不关心3W内容；
一言堂，没有人积极参与。如何解决这些问题，那就是会议组织和管理的相关内容，可以自行学习。

除此之外，还有可能在讨论细节和思考开发时间时发现故事太大，无法在规定时间内完成。
这个时候就需要进一步分解故事——将“更好”的用户故事，拆解为“正好”的用户故事。

//**********************************************

第五阶段：开发流程之“研发-评估-交付”阶段

从各方收集得来的需求，以“故事”的方式记录在卡片上，并先后经历了“机会”➝“探索”➝“模型设计”➝“故事工作坊”，终于流入开发阶段。
在开发阶段，项目会遇到各种问题，它们转化为信息被讨论并反馈，以此来持续的调整方案，并同时更新地图。

在实际开发过程中，我们常将要一个版本要开发的内容按功能模块进行拆分，
例如模块A、B在第一阶段交付测试，C在第二阶段交付测试，以此类推。
《用户故事地图》一书对功能的拆分方式略有不同。在《用户故事地图》中，我们对这种切分方式已有简单描述，此处再详细介绍下。

//**************

研发阶段

功能在正式上线前，会分为三阶段进行开发。它们分别是：

阶段		内容				目标						说明
第一阶段	完成核心流程开发	排除技术风险				1、通过数据观察功能的性能；
															2、使用自动化测试检验稳定性;
															3、关注技术挑战和风险，通过消除技术风险，避免风险在后期造成更大成本;
															
第二阶段	开发周边功能		关注质量，达到可发布标准	1、开发主流程之外的其他可选流程和复杂逻辑；
															2、常常加入之前未发现的新特性;
															3、原系统无法满足性能上的需求而需要额外投入来解决的问题
															
第三阶段	打磨产品			让产品更抢眼、使用更高效	1、可能会加入未预想的东西；
															2、使用线上真实数据测试；
															3、常常会现在原型阶段无法识别的改进点

以上方式并非以独立功能点完成数量进行拆分，而是对所有功能一起进行不同层面的切分。
要想达到它，我认为必须达到：功能间耦合度低，自动化测试的参与，还有就是增量开发方式。

在开发过程中，项目会遇到各种问题：来自技术实现、来自外部、来自于设计合理性一致性等。
我们心理上是排斥它们的，起码不会认为是好事儿。然而换一个角度想，也许就会不同：

从讨论机会出发，到找到用户，从用户或客户面对的问题，到形成对应的解决方案。
所做的每一步、开发的每一个功能都有一个明确的目标，那就是学习（获得更多信息以改进产品）。
————精益创业的核心思路：基于验证的学习

开发过程中出现的问题，恰恰是帮助我们进一步学习的机会。
而正视这件事情的关键，在于学习的态度——即遇到的问题可以被总结、沉淀，以解决更多问题。
以此来看，“变更”这件事情在某些情况下是正常的，我们必须承认，有一些问题是无法在工作坊中想到的。

在开发过程中，我们依然要保持对用户故事地图的高度使用——实时根据目前项目的开发状态和进度，
定时持续的在用户故事地图中标识故事状态（在开发过程中，依然保持对整体的认识）。
另一方面，它可以帮助团队在各个阶段都可以看到自己完成了什么，当前的进度和开发重点是什么。
做过项目的人都会遇到一个问题，就是为了进度常常会临时去掉一些功能，留待后续开发。
然而若没有一个有利的跟踪方式，这部分内容很容易被遗忘，所谓“后续开发”几乎等同于“没有后续”。
若将这些功能实时放在地图中，我们就很容易从全局看到这些遗漏功能的影响，并在相应阶段提上开发日程。

由此可见，在项目跟踪上，用户故事地图也发挥着很大的作用。

//**************

测试与评测阶段

根据前期的故事切分，我们在开发过程中会陆续获得一些小的开发模块。
接下来我们将要对它们进行测试以评估质量，并且判断是否需要调整进度。
这个在SCRUM中应该叫“迭代评审会议”或“迭代回顾会议”。我们可以从三个方向来进行测试评估：

1.用户体验质量：
交互：从用户角度来看，功能是否简单易用、是否体验到乐趣？
视觉：看起来是否让人舒服？
一致性：和其他功能对比，在设计上是否具有一致性？

2.功能质量：
功能实现的正确吗？
是否含有BUG？

3.代码质量：
是否符合编码规范？
代码是否鲁棒？

通过以上方式获得了可以基本工作的功能模块后，就可以立即找到用户进行测试，从而获得改进建议。
我们常讲MVP，但实际上此阶段用于用户测试的模块完全不需要达到上线级别，只要能够帮助用户“成达一个有意义的目标”即可。

受“专家盲点”的影响，开发者并不能完全体会用户的实际使用情况。而用户行为数据和后台反馈又具有局限性，较难对体验的改进有所帮助。
因此在功能模块稳定后第一时间邀请用户（邀请其他干系人也是很有必要的）使用是非常有必要的。
它并非是向用户讲解，而是用最小的成本来验证它是否能正确的解决用户的问题（相信我，很多项目成员是不会考虑成本这个事儿的）。

//**************

交付阶段

功能完成开发后，接下来需要向利益干系人（老板等）和用户交付了。
对于利益干系人而言，他们并不会每天使用软件，他们只关心是否可以尽快上线。
因此，当向上级汇报时，他们常常听不懂做了什么。
为了解决这个问题，我们需要在交付之前经常汇报（用户故事地图可以整体上说明每个阶段完成的内容），
交付时要写清做了什么、目的和背景。对于组织内的干系人，项目进度和完成质量要保持持续可见，这样他们才会信任团队。

产品上线后，运用数据和接触用户来了解结果是否达到预期。反馈达到预期、解决了问题，就可以就此结项。
若发现了改进的问题，则把它们记录下来，重新回到原点。

//**********************************************

第六阶段：开发流程之“回顾”阶段

从项目开始到结束，一个需求从头脑中的想法转变成“机会”，经过“探索”找到更多细节，
由设计师进行模型设计，然后进入“故事工作坊”进行周期评估，最后研发、测试、上线。
开发也许到此已告一段落，然后对于团队而言，它还有一个重要环节需要进行，那就是“回顾”（或称为总结、复盘）。

我们常常会经历过这样的回顾：

1.对回顾不重视，时有时无；
2.回顾总结形式化；
3.其乐融融或者争吵不休。

大部分回顾会议似乎都很少能持续推进具体执行力、对团队有易的结论和措施。
回顾之所以被忽略，想来原因很大可能是因为回顾不是“特效药”，即不可能当下就对项目、对产品产生可见的帮助，
而错误的回顾方式和会议技巧，无疑加重了对这一认知的偏见。
在《用户故事地图》中，回顾的作用被说明为“沉淀优化产品和开流程”，它向我们提供了两种不同目的回顾会议：

1.与项目外的角色一起回顾
2.与项目内的角色一起回顾（项目反思与回顾会议）

//**************

与项目外的角色一起回顾

此类回顾需要邀请的“项目外角色”是指团队外的重要干系人。
回顾会议能帮助他们理解刚刚完成的内容和整体规划的关系，在团队讨论中对产品的一些洞察和利弊分析。
团队开发需要全员参与，因为它是非常不错的、让团队成员看到他人对产品真实反应的机会，有助于提醒他们自己在做的事情有多重要。

回顾会议不需要很正式，最好带一些吃的（这是这本书中反复强调的，也许吃的东西能让人们放松一些）。
在这场回顾会议中，要评估两个内容：

1. 可交付的故事
内容包括方案的目标用户和预期结果、当前方案的发布进度、每个方案构建成果。

2. 后续探索性的故事
包括当前已在处理的机会、为理解问题和解决方案做的所有工作、当前所做的原型，并讨论用户对解决方案的看法。

//**************

与项目成员一起回顾

当然，与项目成员在一起回顾的氛围可以更轻松，找一个安全的地方，带上一些吃的。这种回顾会议有三方面内容：

1. 针对产品，需要成员对产品质量进行评估

这是指项目所有成员对产品质量的一次主观评级，质量共分为1~5级，最是最好的。
我们会通过问自己一些问题，来从三个方面进行评级。具体如下：

1.1.用户体验质量：
它有预期的那么好吗？
UI和具体使用体验是怎样的？

1.2.功能质量：
测试过程是否流畅？
测试人员认为测试更多内容或时间可以发现更多BUG吗？
是否还有许多BUG未解决？

1.3.代码质量：
维护的容易度和扩展度？（应该是只有开发人员才有资格对代码质量进行评级）


2. 针对过程，成员们讨论最近一次开发周期中的工作方式
它主要包括两方面的内容：

2.1.下一次开发周期要做哪些改变？
2.2.最近一次开发周期中做的改变有效吗？这些策略是继续保持还是放弃？

以上部分常常是最容易被忽略的，因为它们并不与KPI直接相关，也无法对产品有快速见效的改变。
也许这就是短视之处，人们常常需要“特效药”，但我相信团队协作和效率问题，并不是一两项举措就可以有所改变而受用终生。
团队，毕竟是一群人的协作，只有慢慢协调和调整，引导群体逐渐适应，才能源源不断的为团队提供向前冲的动力。


3. 针对计划
了解scrum的朋友相对更容易理解大迭代和冲刺的关系。
无数个冲刺组成一个迭代，每个冲刺相当于小的开发周期。
而在每个冲刺结束时，都需要进行回顾，团队成员一起目前项目的进展，
已完成和未完成的故事和数量。以决策是否需要对开发内容和进度有所调整。

//**********************************************

第六阶段：故事（需求）拆分

我们了解故事、故事卡片，以用户故事推动的项目开发流程。实际开发中，团队往往会先得到巨大的故事（需求）。
从产品角度，拆分意味着放弃部分功能，这种放弃引起的损失，会带来更痛苦的感受，难以抉择。
从开发角度，拆分是建立在功能低耦合前提下，而这一点，又是基于程序早期合理的架构。
但现实却是，研发过程中为了进度而采用速效方法（不会做太多长远考虑，这也是技术债产生的原因），长期的合理性变得不那么重要。
基于以上种种，拆分过程就变得十分痛苦和坚辛。

然而，为了及时评估产品和进度，同时满足资源与时间限制、降低成本和实现商业目标的要求，故事拆分都是不二之选。

//**************

一、由谁来拆
最近在网上常常见看到嘲讽甲方的段子，怎么会有那么多乙方公司？
后来仔细一看，发现很多发段子的“乙方”,和他们嘲讽的甲方都在同一家公司。
而这其实就是工作中常会出现的“甲方-乙方反模式”。

甲方-乙方反模式

这一反模式的表现是，团队成员之间是”食客-服务员关系“，即我想要什么，你就要给什么。
具体为甲方清楚自己想要什么，并表达给乙方，乙方则倾听理解，并找到解决问题的技术方法。
然而，乙方承诺的排期会受各种原因的影响，若不能按时完成，乙方可以找各种理由为延期辩解。
而甲方最终拿到功能后，也有可能发现不是自己想要的。
最终，围绕解决问题的对话，变成了围绕需求的扯皮，最坏的情况是没有人成为赢家。
在这场对话中，真正的核心其实是甲方需要清楚自己遇到的问题，而不是预测什么方法最合适。
很显然，这种问题的一方面原因是故事（需求）的解决方案是由单一方决策。那么由多方共同决策是否就可以解决这一问题呢？

一人决策与多人决策方式

在大多数场景下，需求都是由单一方来负责并决策的。
而团队成员常常表现为“你来决定，告诉我就好了”、“你要达到的效果是什么？”，
对于单一方决策而言，这一场景实在太爽——指挥千军万马，指哪儿打哪儿的快感油然而生。等等，这里是不是存在什么问题？
指挥固然爽，然而一旦出问题，那么团队成员也会说“这个是你定的”、“我只是照着你说的做而已”。
正所谓成也萧何，败也萧何。让我们来分析一下：

用户故事由模糊到具体的过程中，需要展开多次对话，一个人是无法完成的；
在流程中的各个环节由各人负责，那么各人也将成为卡住流程的瓶颈；
一个人的知识、视野和专业范围是有限的。

既然单一方决策会成为瓶颈，那么多方决策是否会更好？
也不尽然，一方面，当资源有限时，参与决策者会倾向于妥协，每个人都无法达成目的；
另一方面，当资源无限时，大家倾向于做所有的事情。想想我们开会的时候，没有一个人做最终决策的情况。


//**************

探索团队

《用户故事地图》提供了另外一种决策方式——由跨部门、小型团队协作的方式进行，如题，它就是称之为“探索团队”的决策组织。
在这个组织中，共有2~4个人，包括产品负责人、用户体验设计师（设计师）、资深技术人员，所有参与人员必须具有一流的沟通和协作能力。

这个团队应该由一个对业务愿景、战略以及产品服务的市场有深度理解的产品负责人主导。
这个核心团队应该有这样的人，他理解用户，可以自如地和用户合作，力求了解他们的工作方式，并且可以开发简单的UI原型。
这个团队也应该包括一个来自开发团队的资深工程师。这个人需要理解系统目前的架构，知道哪些新的技术方案可以用来解决目前的难题。

探索团队应从探索阶段就开始介入，终止于“故事工作坊”以完成最后一次讨论。
在故事工作坊中，除了探索团队成员之外，还要纳入测试人员等，共同定义最佳的开发和测试用时。
探索团队通过用户故事的一系列方式，抽丝剥茧般梳理和评定用户故事，将故事拆分为大小合适的模块。
这些模块，将最终流入开发流程中。

//**************

二、故事（需求）拆分

探索团队负责拆分故事，比较合适的模块大小是“每个模块开发与测试时间共计1~3天”。
如何做到呢？《用户故事地图》并没有提供具体的执行方法，但有一些思路值得借鉴。
打个比方，如果把软件比做大蛋糕，那么切分的结果应该是怎样的？
应该是很多纸杯蛋糕（一定有人想到刀子把蛋糕切成一块一块）。
每一个纸杯蛋糕可以独立交付，食谱也都类似，都是一点糖、一点面粉、一两个鸡蛋什么的。

那些需要被拆分的故事被称之为“史诗故事”，我们会从三个角度来对它们进行切分：

用户角度：可以满足某一需要；
开发角度：只需要几天时间就可以完成开发和测试；
业务角度：有助于实现业务目标；

此外，还需结合在《用户故事地图：开发流程之“研发-评估-交付”阶段》中讲到的研发的三个阶段。
对故事（需求）进行拆分，它有些像碎石的过程，无论是怎样的石头，碎石的结果是得到一堆同样的小石头——这明显是一个技术活儿。

//**************

三、故事（需求）聚合

有时候，我们的需求池中会充拆大量的小需求，它们细碎而不值得大动干戈，但堆积太多又不知如何处理。
此时，我们需要拿起另外一把工具，就是“聚合”——可以将那些细碎的小故事聚合为“主题”。

“主题”用以归类故事——收集需要下个版本发布、同一功能的不同版块、以某种其他方式关联的一堆故事。
内容不多时候，我会直接根据需要将一堆小故事聚合在一个卡片中。
当然，当这种故事很多时候，也可以采用以下方法：

1.有便签写下所有需求；
2.邀请理解系统的项目成员；
3.寻找一面墙；
4.给每个人分一些故事卡片；
5.大家凭土目水之，把相似的卡片放在一起；
6.过程中，大家安静的做，不要交流；
7.最后沟通不同分类观点的卡片；
8.每每一组一个相对具体的大标题，凝练故事；

以上方式是《用户故事地图》中介绍的方法，看来就是用研中“卡片分类法”的方式。

//**************************************************************************************************

估算的目的 - Martin Fowler

我第一次与敏捷软件开发的邂逅，是在极限编程刚刚兴起时，跟Kent Beck一起工作的经历。
其中让我印象深刻的事情之一，就是我们如何做计划的方式。
这里面包括一种估算方式，比起我之前见到过的其他方法，它既轻量，还更有效。
这样过了十年，现在一些有经验的敏捷实践者，开始了一场关于估算是否值得甚至是否有害的争论。
我想，为了回答这个问题，我们必须审视一下估算的目的。

通常的场景是这样的：

开发者被要求给出对于即将开始工作的估算。
人们大多是乐观派，即使没有压力的情况下（一般至少也会有点压力），这些估算通常会比较小。

这些任务和估算会被转化成发布计划，然后用燃尽图跟踪。

接着，人们就会按照这些计划，持续监控着团队为完成任务所投入的时间和资源。
结果当实际消耗的时间和资源，超过当初的估算时，每个人都会变得失望。
为了迎合当初的估算， 开发者被要求牺牲软件的质量，但这只会让事情变得更糟。

//---------------------

这种情形下，对估算的投入充其量就是一种浪费——因为“估算就是在干净的衬衫上猜测”。
只有当估算被当做追逐更多特性的手段时，它才会变成实质上有害的行为。
过分追逐特性是一种很糟糕的情形，人们只是始热衷于完成一个又一个特性，而不是追踪项目的真实结果。

估算还会设定期望值，既然估算通常会偏低，所以它们设定的期望值也多是不切实际的。
任何时间上的增长，或者软件特性被砍掉，都会被视作是失败。出于对风险的逃避，这些失败的后果往往会被放大。

面对类似这样的情况，我们就很容易看到人们把愤怒对准了估算本身。
这样也导致越来越多的人认为，任何沉迷于估算的人并不是真正的敏捷实践者。
而批评敏捷的人则说，这意味着敏捷软件开发的本质就是，开发者很快动手开始做，
却并不明确要做什么，而且承诺说，该做完的时候肯定会做完它，而且你肯定会喜欢它。

我并不同意估算是天生有害的活动。如果有人问我，估算是不是件糟糕的事情，我的答案会是一名标准咨询师的答案：“不一定”。
而接下来的问题就会是“取决于什么”。

为了回答这个问题，我们就不得不问，我们为什么要估算——因为我想说：“如果事情值得做好，就值得问清楚，我们到底为什么要做它”。

对于我来说，当你面临重大的决策时，估算就是有价值的。

我的第一个得益于估算决策的例子是：资源的分配。
一般来说，组织大多拥有固定数目的钱和人，而且通常有太多值得做的事情。
因此人们就面临选择：我们是做A还是B？
面对这样的问题，了解A和B分别要涉及多少投入（以及成本）是有必要的。
为了做出一个明智的决策，你需要有对成本和收益有个大致的了解。

另外一个例子是估算对协调的帮助。
蓝色团队想在他们的网站上发布一个新的特性，但直到绿色团队创建新的服务提供给他们关键数据后才能发布。
如果绿色团队估算他们会在两个月后才能完成新的服务，而蓝色团队估算需要一个月去能完成新的特性，
那么蓝色团队就知道不值得现在就开始实现这个新特性。他们可以花费至少一个月时间，工作在其他可以早点发布的特性上。

所以任何时候当你想做估算时，你应当非常清楚哪一项决策需要依赖这个估算。
如果你找不到这样一项决策，或者那个决策并不是那么重要，这就是一个信号：此时做估算是在浪费时间。
当你找到这样一个决策时，那要知道问题的上下文是什么，为什么估算会很重要。
同样还要搞清楚期望的精度和准确性。

同时也要明白，有时候为了做决策，可能会是其他替代的方案，而未必需要估算。
也许任务A比起B要重要得多，以至于你都不需要一开始把你所有的空闲精力都放在B上。
也许有办法让蓝色团队和绿色团队合作，更快地创建出服务来。

类似地，跟踪计划也应该由它如何影响决策来驱动。
通常我的意见是，计划扮演的是基线角色，帮助评估变化——如果我们想要添加一个新的特性，我们应该如何把它放进既定的“五磅篮”里呢？
估算可以帮我们理解这些取舍，并因此决定如何响应变化。
在更大范围下，重新评估整个发布计划，可以帮助我们理解整个项目是否仍然充分有效利用了我们的能力。
几年前，我们曾经有一个规模达一年之久的项目，在重估时发现还要多花几个月进去，之后我们取消了这个项目。
我们把这视作成功，因为重新估算发现，项目会比我们最初期望的会花费更长时间——早点取消可以让客户把资源转移到更好的目标上。

但跟踪计划的同时，也要记住估算是有适用期限的。
我曾经记得有一位经历颇丰的项目经理说过，计划和估算就像是生菜，
刚过几天还很新鲜，过了一周有点枯萎了，几个月后就完全看不出来是什么了。

许多团队发现，估算提供了一种有用的机制，可以促使团队成员间彼此交流。
估算会议可以帮助大家以不同的方式，对实现即将开始的故事、未来的架构方向和代码库中的设计问题，有更好的理解。
在这种情况下，任何输出的估算数字可能都不重要。
这样的对话可能以很多方式发生，但如果这些对话没有发生，就可以引入关于估算的讨论。
相反地，如果你考虑停止估算，你需要确保估算时会发生的任何有效的对话，在其他地方还能够继续进行。

在任何敏捷相关的会议上，你都会听到很多团队在谈论，没有估算他们也可以工作得很有效。
通常这是因为，他们以及他们的客户明白做估算并不会影响重大的决定。
举个例子，一支小团队在和业务人员紧密协作。
如果广阔的商业前景很乐意分配一些人到那个业务单元，那么就可以按照优先级开展工作；
通常这得益于团队把工作拆分成足够小的单元。团队在敏捷流畅度模型中的等级，在这里起到非常重要的作用。
在团队前进时，他们首先会纠缠于估算本身，然后开始会做很好的估算，最后达到不再需要估算的境界。

估算本身并无好坏之分。如果你不用估算就可以有效地工作，那就这么干。
如果你需要一些估算，那就要确认你很清楚估算在决策时起到的作用。
如果估算会影响到重大的决定，那就尽可能做出最好的估算。
一定要小心那帮告诉你任何时候都要做估算，或者从来不需要估算的人。
任何关于估算用法的争论，都要遵从于敏捷的原则，即针对你特定的上下文，决定你该采用的什么样的方法。

估算的目的是为了促进沟通和凝聚共识, 再者是确认其真正的价值所在, 均衡投入和产出效率.
但是更应该强调持续改进,聚焦于交付价值. 敏捷团队使用点数进行估算, 当任务足够小的时候就应该停止估算.
要准确地做出对完成故事所需小时数的估算是很困难的, 
因为影响这个数字的因素实在太多, 未知的风险, 模棱两可的需求和开发者的经验都会对其产生影响.
而故事点数反映的是故事的复杂度, 预测和估算的使用场景是不同的.

//**************************************************************************************************

用户故事Invest原则

Invest描述:

Idependent(独立的):一个用户故事对于另一个用户故事应该是独立的（尽可能的）。
故事之间的依赖性使得增加了计划编制，确立有限级，故事估计这些工作非常困难。通常，可以通过组合用户故事或者分割用户故事来减少依赖性。

Negotiable(便于沟通的):一个用户故事是便于沟通的。一个故事的卡片是包含故事详情的简短描述。
这些详情是通过讨论阶段来完成的。一张还有很多详情的卡片实际上减少了和客户的会谈。

Valuable(有价值的):每个故事必须对客户具有价值（无论是用户还是购买方）。一个让用户故事有价值的好方法是让客户来写下它们。
一旦一个客户意识到一个用户故事并不是一个契约而且可以进行协商的时候，他们将非常乐意写下故事。

Estimable(可估计的):开发者需要去估计一个用户故事以便确定有限级并对故事进行规划。
但是让开发者难以估计故事的问题来自：对于领域知识的缺乏（这种情况下需要更多的沟通），或者故事太大了（这时需要把故事切分成小些的）。

Small(短小):一个好的故事应该在工作量上短小，描述具有代表性，而且不超过2-3人周的工作量。
超过这个范围的用户故事，将会在划分范围和估计时出现很多错误。

Testable(可测试的) :一个用户故事是可测试的来用于确认完成，记住，我们不开发不能测试的故事。
如果你不能测试那么你永远不知道你什么时候是完成了。一个不可测试的用户故事例子：软件应该是易于使用的。

一个编写良好的用户故事是敏捷开发的基础。它们应该相互独立，详情应该便于开发者和用户进行沟通，
应该对用户有价值，应该对于开发者来说尽可能的清晰以便进行估计，应该短小，通过预定义测试用例的使用确保它是可以测试的。


//**************************************************************************************************

用户故事（一）：什么是用户故事？

一、用户故事的概念

概念这种东西我喜欢说文解字的方式去理解和阐述；
用户故事=用户+故事=人+故+事，那就是一个人因为什么原因要做什么事，提炼出来三要素就是who、why、what。
从需求角度描述就是一个用来确认用户和用户需求的简短描述。


二、用户故事的三要素

用户故事在软件开发过程中被作为描述需求的一种表达形式。
为了规范用户故事的表达，便于沟通，用户故事通常的表达格式为：作为一个<用户角色>, 我想要<完成活动>, 以便于<实现价值>。

一个完整的用户故事包含三个要素：

角色（who）：谁要使用这个。
活动（what）：要完成什么活动。
价值（value）：为什么要这么做，这么做能带来什么价值。


用户故事示例：
作为[ 客户 ]，我想要[ 购物车功能 ]，以便[ 我可以轻松地在线购买物品 ]。
作为[ 经理 ]，我想[ 生成报告 ]以便[ 我可以理解哪些部门需要更多资源 ]。
作为[ 客户 ]，我想[ 在物品到达时收到短信 ]以便[ 我可以马上去接你 ]


角色 - 用户应该是与系统交互的真实人。
要尽可能具体
开发团队不是用户

操作 - 系统的行为应该写为操作。
通常每个用户故事都是唯一的
“系统”是暗示的，不会写在故事中
主动语音，而不是被动语态（“我可以得到通知”）

好处 - 好处应该是真实的结果，它是非功能性的或系统外部的。
许多故事可能共享相同的利益声明。
优点可能是其他用户或客户，而不仅仅是故事中的用户。

角色表示将与要实现的系统进行交互以实现目标的个人，系统，子系统或任何其他实体。他或她将通过与系统交互获得价值。
Action表示用户可以通过与系统交互来实现的期望。
优势代表与系统交互背后的价值。


三、3C原则

用户故事的描述信息以传统的手写方式写在纸质卡片上，所以Ron Jeffries(2001)对这三个方面称为3C：
卡片(Card)、对话(Conversation)和确认(Confirmation)。

（1）卡片（Card）：用户故事一般在小卡片上写着故事的简短描述，规则和完成标准。
卡片的正面书写故事的描述，格式为：作为一个<角色>, 我想要<完成活动>, 以便于<实现价值>描述需求；
卡片背面书写完成用户故事的规则和完成标准，格式为：Given…When…Then。

（2）交谈（Conversation）：用户故事背后的细节来源于和客户或者产品负责人的交流沟通；确保各方对故事的理解正确。

（3）确认（Confirmation）：通过验收测试确认用户故事被正确完成。


四、INVEST原则

好的用户故事除了格式规范，要素完整外，还应该遵循INVEST原则：
Idependent（独立的）；Negotiable（可协商的）；Valuable（有价值的）；Estimatable（可评估）；Small（小的）；Testable（可测试的）。

1. Idependent（独立的）
要尽可能的让一个用户故事独立于其他的用户故事。
用户故事间保持独立性不仅便于排列和调整优先级，使得发布和迭代计划更容易制定，
便于独立地理解、跟踪、实现、测试以及频繁交付，也使得用户故事的大小估算所涉及的范围更清晰，从而估算偏差更小。

2. Negotiable（可协商的）
一个用户故事的内容要是可以协商的，用户故事不是合同。
一个用户故事只是对用户故事的一个简短的描述，不包括太多的细节；具体的细节在沟通阶段产出。
一个用户故事带有了太多的细节，实际上限制了用户、团队的想法和沟通。

3. Valuable（有价值的）
每个故事必须对客户具有价值（无论是用户、购买方还是公司内部角色）。
用户故事对于最终的用户是有价值的，因此应该站在用户的角度去编写，描述的是一个一个的feature，而非一个一个的task。
这个特点促进团队的开发和测试成员由传统的指令式工作方式向自驱动的价值导向工作方式转变，使团队中的每个人知道自己每天做的工作价值。

4. Estimatable（可评估）
计划会议里面一个很重要的环节，那就是故事点的估计。
实际上就是对要开发的User Story进行一个粗量级的估算，以便于团队能够知道这个user story的复杂度（工作量）。

重点放在当前迭代里能否按照该用户故事的接收条件和团队定义的DoD(完成标准)来完成这个用户故事，
如果不能完成，给出理由，由PO来决定是否拆分或者重新设计用户故事。

让开发者难以估计故事的问题来自：对于领域知识的缺乏（这种情况下需要更多的沟通），或者故事太大了（这时需要把故事切分成小些的）。

5. Small（小的）
一个好的故事在工作量上要尽量短小，最好不要超过10个理想人/天的工作量,至少要确保的是在一个迭代中能够完成。
用户故事越大，在安排计划，工作量估算等方面的风险就会越大。

6. Testable（可测试的）
一个用户故事要是可以测试的，以便于确认它是可以完成的。
如果一个用户故事不能够测试，那么你就无法知道它什么时候可以完成。
一个不可测试的用户故事例子：软件应该是易于使用的。


五、三个准则

用户故事在遵循了INVEST原则后，基本就是一个好的用户故事了。
再重点分析三个准则，帮助在产出用户故事时更好地符合原则。

三个准则是：一个用户、完整价值、不依赖。

1. 一个用户
只包含一个用户，因为多个用户常常有细微的差别。
一般是典型的用户，常常有共同的某类需求。

2. 完整价值
完整地交付一个客户价值。
一个完整的用户故事意味着这个故事完成后，用户可以达成一个明确的、有意义的目标。

3. 不依赖
依赖性的三种常见类型是：重叠、顺序和包含。

总体上来说，故事之间功能点相互重叠是需要避免的；
顺序关系是现实存在，在多数情况下可以通过一些手段解决；
包含关系对复杂系统是有帮助的，对排定发布和迭代计划的影响需要注意。


（1）重叠依赖

重叠依赖是带来最多困扰的依赖形式，特别是多个用户故事包含多个不同的重叠部分时，
很难找到一组用户故事可以代表该最小可行产品的功能集合，该集合应该包含且仅包含一次需要的功能。

解决方式：
将重叠部分单独剥离出来做为独立的用户故事；
合理拆分用户故事，并且将重叠部分只保留在一个最有内聚性的用户故事中；
使用Scrum开发模式。

（2）顺序依赖

顺序依赖是指要使某用户故事完成，另外的一个或多个用户故事必须在它之前完成。
顺序依赖通常是无害的，而且有一些方式可以减轻这种依赖。

从敏捷开发的角度，整个系统是从初始的最小可行产品逐步演化为强大的产品，后面的每一步是建立在前面的基础之上的。
但从另外的角度，不必要的顺序依赖使得排列和调整优先级变的比较困难，进而影响制定发布和迭代计划，也使得用户故事的大小估算更难以把握。

解决方式：
一个迭代内的用户故事尽量做到没有内在依赖；
保持迭代之间只有单向依赖，在时间上只有后面迭代的故事对前面迭代故事的单向依赖（前向依赖）；
剥离出核心依赖作为独立的故事，不要把有依赖和无依赖的需求混在一个故事里。

（3）包含依赖

包含依赖是指在组织用户故事时使用有层级的管理，
比如常见的特性－故事两级管理，一个特性包含多个用户故事，这样就构成了特性对其属下故事的包含依赖。

解决方式：
用户故事一级用来做迭代计划，避免用特性一级做粗粒度迭代计划，特性一级可以用来做发布计划；
特性一级同样可以进行拆分，直至拆分到最小市场化特性的程度，并将其包含的用户故事分别归到新拆分出的特性中去；
遵从最小可行产品的理念，一个特性分多个用户故事多个迭代实现，每一个迭代可形成潜在可交付或者提供内部或外部反馈。


//**************************************************************************************************

用户故事（二）：为什么要使用用户故事表达需求？

1. 敏捷开发的需求敏捷化的手段

就职在互联网企业，在一个不大的项目组里，还是个要发挥产品经理主观能动性的产品，你要去探索商业模式，做产品规划，求生存。
就先给你一只打火机让你在黑暗中找金矿，你打着打火机只能照亮周围1米，步子不能跨太大，不知道1米外是不是个坑，先跨一步看看，再能跨下一步。

更悲剧的是你的打火机不能一直按着，一直按着烫手啊，还要担心燃气够不够用。只能走走停停，摸摸索索，还要各方求资源补充燃气。

这种环境下，整个团队都在讲小迭代，讲敏捷，同样你必须写用户故事啊。

用户故事的出现使敏捷开发方法覆盖了软件研发中的“需求”环节，是敏捷开发模式中的需求敏捷化的重要手段。
敏捷方法诞生十余年到现在我们知道，一个研发团队要想实现完全的敏捷转型光是实现迭代开发过程的敏捷化是不够的，
SCRUM和Kanban都无法解决产品需求敏捷化的问题。

而用户故事的诞生，就是为了实现需求的敏捷化。
虽然用户故事实践本身还存在一些不足，但是至少到现在我们知道，用户故事是需求敏捷化的基石之一。

Ps：如果你说你们在敏捷开发，但是你从不写用户故事，那怕是你们对敏捷开发有误解，你们做的应该就是单纯的迭代开发，不是敏捷开发。
敏捷中重要的一点就是团队达成一致意见，成员都认同要做的事的价值，这是建立在对需求的3W（who、what、why）重复理解和讨论的基础上达成的。
传统的需求表述方式只体现了what，无法支撑这种理解和讨论。


2. 贯穿整个产品实现过程

需求评审会之后，进入开发、测试环节，常常能听到的声音是“这个需求当初为什么要这么定？”“我也不知道，产品就这么定的。”

随着时间的推移，可能产品经理自己也会忘记为什么要做这个需求，以及为什么要这么做。
这就会造成团队的后劲不足，无法明确自己正在做的事的价值。
当一个人对于正在做的事，不知道有何意义时，是痛苦的。

而用户故事能有效的将软件研发过程中的需求环节、开发环节和测试环节有效的连接起来。
通过经典的“三段论“描述和渐进的细节探索，用户故事实现了需求描述的敏捷化；
通过优先级排序和故事点的有效应用，用户故事实现了需求到开发的连接；
通过验收标准的渐进明确，用户故事实现了需求与测试的连接。

可以说，正是有了用户故事这根线，才把软件研发团队的主要的工作环节：需求、开发、测试都有机的串联起来。
整个团队成员都明确自己做的事能给团队和客户带来什么价值，形成内驱动。


3. 提高沟通效果

举个需求评审的场景：敏捷开发中，开发、设计、测试等在需求评审时，就会秉着敏捷参与的文化理念，来挑战你的权威，一起怼产品啊，
怎能错过如此良机：这个需求谁提的，为什么这么做，做了有什么价值？

一顿舌战群儒后，身心俱疲，开发还是用怀疑的眼光看着你说：“这都是你YY的吧？”
最后，不得已来一句，老板就让这么做的，下周3上线。

但是，你用用户故事的”三段论”作为一个<用户角色>，我想要<完成活动>，以便于<实现价值>，在会前把故事发出去，
注意力就是在故事的主人翁上，会中就是大家一起在探索用户场景、路径、给你提供思路，而不是在怼产品。

讲故事不用太在意听故事的人是谁？

用户故事的一个核心在于对话（Conversation），客户和开发人员可以就某个故事深入的交流，对每个重要的细节达成共识。
这避免了通过文字记录而可能导致的不精确性或语义多重性的问题。
并且向用户或客户显示价值，不涉及专业的技术术语，从而使得用户和开发者理解起来都很容易。


4. 用户故事适合于迭代开发

在开始编码之前，我们并不需要写出所有的用户故事，我们可以写出一部分故事，就开始编码与测试，然后按需求的节奏重复这个过程。
在写故事时，也可以按照我们认为合适的粒度去写，正是因为我们很容易对故事本身也进行迭代，所以用户故事很适合迭代开发。


5. 用户故事鼓励延迟细节

我们可以先写出一个起始的目标层面及占位意义的故事，在这个故事再后来对于开发进程变得重要时，才用更多对的细节来代替这个简单的描述。

这很适用于有时间限制的项目。团队可以非常迅速的写出数十个用户故事，让大家对要开发的系统有一个整体的概念，
然后先讨论当前时间优先级较高的故事的细节并开始编码，相对于事先完成系统的整体需求文档，大大加快了研发进度。


6. 用户故事传播隐性知识

缘于对面对面沟通的重视，故事能够促进团队内隐性知识的积累。
开发人员与客户之间以及他们内部的沟通越密切，越多的隐性只是能得到传播与加强。


补充：了解用户故事的诞生

要了解为什么要用用户故事，还有很重要的一点是，了解它的起源和发展。
就像了解一个人，最好的方式就是了解他的成长环境，去他成长的地方，看看塑造他的环境是什么样子的，以及他的经历。

1998年，用户故事首次提出。

用户故事的起源是来自与XP极限编程的计划游戏环节，据现在能够追查的记录，
最早是在1998年这样提到“用户故事”的：客户通过用户故事（像用例）来定义项目范围。 
XP没有把用户故事作为一个单独的实践来说明，而是作为计划游戏中的一个游戏环节。

在相同时期，另外一个与用户故事对等的词汇“故事卡片”（Story Card）同样被XP提出，有人说其实那时故事卡片的使用频率要高于用户故事。

以Rally和Jira为代表的用户故事管理工具在2005年以后得到了巨大发展。

从用户故事的发展历程可以看出，用户故事的提出和应用，
为后来发展的敏捷开发模式奠定了基础，直到现在也是敏捷开发的中需求敏捷化的重要手段。

//**************************************************************************************************

用户故事（三）：用户故事该怎么写？

一、故事标题

用户故事的描述在列表中进行管理时，不利于快速理解，也不能一行展示。为每个故事取个标题（名字）就很有必要，
而且像禅道、TAPD软件的需求表述格式中标题也是必填项。

就行邮件的主题，用户故事的标题是为了让读者能快速了解这个用户故事的要点和大致范围；怎么写好标题也是有章可循的。

常见的做法有：

1. 用户角度的动宾短语
如：创建商品、输入名称、修改头像等等这是动作+对象形式，擅长描述从用户看到的活动或功能。

2. 系统角度的动宾短语
此处的系统是指待开发的对象。
如，toast提示网络异常，记录用户访问次数，显示搜索结果，显示倒计时。擅长描述系统要执行的反馈和操作。

3. 主谓宾短语
有时动宾短语不能推断主语时使用主谓宾短句，或者可能有可能混淆时需要明确主语，此时就需要增加动作主语，
如，超级管理员重置普通管理员的口令；A系统推送批量客户和合同信息。

随着时间推移，新增的用户故事有不少是基于原有的功能来再提升修改，这时往往要在标题里加上状语来区分，
比如根据客户所在城市来查询客户列表，在客户没有登记电话号码时强制客户登记号码。 
状语要清晰得说明用户故事所处的情况，能够区分类似的用户故事。

4. 差劲标题举例
（1）外访业务处理
点评：处理是万金油词语，没有突出重点。

（2）设计资产逾期流入流出报表
点评：主语既不是用户，也不是待开发的系统，而是开发人员，这更像是一个任务的标题。

（3）角色分配资源
点评：要做什么呢？不能快速理解故事核心。


二、故事描述

固定格式“作为……（用户角色），我想要……（完成活动），以便于……（实现价值）”的格式。
故事描述一这种三段式表述，相比较于传统需求表述，体现了需求方和需求价值的重要性，也为保证了需求描述的可协商性。


三、规则描述

为了完成故事，有时需要制定故事的实现规则，涉及的名词定义等。
规则描述由产品经理初步制定，在故事讨论后，进行修订确认。
写作方式就是一条条穷举列出。注意这里不涉及原型页面和交互规则。


四、验收标准

可作为验收测试用例的具体例子。这也是我们常说的实例化需求，也是为了避免误读，让抽象的需求变得具体和可测试。
这一步很难，但非常重要。没有明确的验收条件，我们便不知道如何测试，业务也不知道如何验收。
通常，一个用户故事包含若干个验收条件，包括快乐路径（Happy Path）与意外场景（Exceptional Scenario）。

建议将验收条件全部写成“Given…When…Then”的 Gherkin 语言格式，这种写法和测试用例类型，是一条条具体的路径/场景，信息传递误差小。
延伸开来，这一原则适用于任何事情。做一件事情，以终为始，在一开始明确要做成什么样子，行成闭环，才能指导行动并确保结果正确。


五、具体设计方案

故事完成需要具体的执行方案，方案一般都有故事实现的原型界面，交互规则；如果是数据类故事需求，还有数据指标的定义等。
具体设计方案的产出可以在故事确认前也可以在故事确认后，具体看产品的时间和团队的要求。
方案文件一般为附件或原型链接。


六、上线检查清单

有些用户故事的上线可能需要一些额外的步骤，在做用户故事开发时就应该时刻想着上线时要留意的问题，及时记录作为备忘，以确保上线成功。
这里，确认理解、问为什么以及验收条件是重点，作为“就绪定义”（Definition of Ready, DoR），帮助我们厘清用户故事的具体需求。

//**************************************************************************************************

MarkDown 文档记录开发相关信息至 README.md 内，内容包含如下：

1.服务综述。包含服务的名称、服务提供的基本功能，服务的消费者以及服务提供的API。
同时，记录服务的维护者信息，包括姓名、邮箱、电话号码等，确保能在服务出现异常时第一时间联系到维护者。

2.服务SLA。描述服务的可用性，明确提示不可用的时间段。如周一至周五（6：00~23：59）

3.与架构相关。描述服务依赖的组件、其他服务、数据库等，同时也体现数据的流向。
一般笔者使用Grapviz工具完成这些依赖的表示。

4.运行环境。描述环境相关信息。如测试环境、预生产环境、生产环境等的访问地址以及访问方式，如登录密钥的获取方式。

5.与开发相关。描述开发的相关信息。如何配置开发环境、本地启动、调试、基本开发流程等。

6.与测试相关。 描述测试相关信息。如测试的策略、如何运行测试、覆盖率标准等。

7.流水线相关。描述和持续交付相关信息。如持续集成地址、构建包存储地址等信息。

8.与部署相关。描述部署相关信息，通常包含但不限于如何部署到不同环境、部署后的功能验证方式。

9.与运维相关。如监控、报警访问地址，不同环境的日志搜索的索引、控制面板、部署的工程、服务器访问的SSH信息、健康检查的接口等。
同时也可以包括如何实施灾备的指导。

10.常见的问题链接。系统存在一些已知的问题，短时间内无法或者没有计划修复，可以列出来。

//**************************************************************************************************


用户故事模板

用户故事仅捕获需求的基本要素：
它是谁的？
它对系统的期望是什么？
为什么重要（可选？）？

以下是70％的从业者使用的简单用户故事格式：

角色 - 用户应该是与系统交互的真实人。

要尽可能具体
开发团队不是用户


操作 - 系统的行为应该写为操作。

通常每个用户故事都是唯一的
“系统”是暗示的，不会写在故事中
主动语音，而不是被动语态（“我可以得到通知”）


好处 - 好处应该是真实的结果，它是非功能性的或系统外部的。

许多故事可能共享相同的利益声明。
优点可能是其他用户或客户，而不仅仅是故事中的用户。


用户故事示例：
作为[ 客户 ]，我想要[ 购物车功能 ]，以便[ 我可以轻松地在线购买物品 ]。
作为[ 经理 ]，我想[ 生成报告 ]以便[ 我可以理解哪些部门需要更多资源 ]。
作为[ 客户 ]，我想[ 在物品到达时收到短信 ]以便[ 我可以马上去接你 ]

在上面的例子中：
角色表示将与要实现的系统进行交互以实现目标的个人，系统，子系统或任何其他实体。他或她将通过与系统交互获得价值。
Action表示用户可以通过与系统交互来实现的期望。
优势代表与系统交互背后的价值。

这不是一个规则，而是一个通过考虑以下因素来帮助您思考用户故事的指南：
用户故事将为某人或某一方（例如客户）带来价值。
用户故事满足了用户的需求（例如，当物品到达时接收短信）
有理由支持实现这个用户故事（例如，客户可以去拿她购买的物品）


使用3C详细说明用户故事（卡片，对话和确认）

另一位XP的创造者Ron Jeffries描述了我们最喜欢的用户故事思考方式。
用户故事有三个主要组件，每个组件以字母“C”开头：卡片，对话和确认，
用于描述用户故事的三个元素。哪里：

卡

卡片代表2-3个用于描述故事意图的句子，可以被视为对话邀请。
该卡作为令人难忘的令牌，其总结意图并代表更详细的要求，其细节仍有待确定。

在将它们带到团队之前，您不必将所有产品Backlog项目完全“预先”写出来。
它承认客户和团队将在他们开展工作时发现所需的基础业务/系统。
这一发现通过围绕用户故事的对话和协作来实现。卡通常遵循类似下面的格式：

作为产品的（角色），我可以（做行动）以便我可以获得（一些好处 /价值）

注意：书面文本，即对话的邀请，必须解决故事的“ 谁（角色） ”，“ 什么（行动） ”和“ 为什么（好处） ”。


会话

会话代表目标用户，团队，产品所有者和其他利益相关者之间的讨论，这是确定实现意图所需的更详细行为所必需的。
换句话说，该卡还代表关于意图的“对话的承诺”。

由产品负责人促成的协作对话涉及所有利益相关者和团队。
对话是故事的真正价值所在，并且应该调整书面卡片以反映当前对该对话的共同理解。
这种对话大多是口头的，但最常见的是文档和理想的各种自动测试（例如验收测试）。


确认

确认代表验收测试，即客户或产品所有者将如何确认故事已经实现满意。
换句话说，确认表示满足的条件，将用于确定故事是否满足意图以及更详细的要求。

产品负责人必须确认故事已完成才能被视为“完成”
团队和产品负责人根据团队目前对“完成”的定义检查每个故事的“完成度”
可以为个别故事确定与当前“完成”定义不同的具体接受标准，但是团队必须很好地理解并同意当前的标准。
所有相关的验收测试应处于通过状态。


如何识别用户故事？

用户故事应与利益相关者一起确定，最好通过面对面的会议。用户故事是需求发现过程，而不是前期需求分析过程。

在传统的需求捕获方法中，系统分析员试图了解客户的需求，然后详细准备系统的需求规范。
这不是用户故事方法的工作方式。用户故事的识别更像是记笔记过程，而不是文档处理。
我们列出了识别用户故事的主要步骤，如下所示：

1.通过与用户的讨论，我们倾听并了解他们的问题和需求
2.然后，同时记录他们作为用户故事的需求。
3.这些用户故事将成为需求的来源。
4.随后可以及时填写详细信息，为整个项目开发过程中的团队提供“足够”的需求参考。


用户故事的生命周期

从广义上讲，整个软件项目中每个用户故事有六种主要状态：

有待
通过用户和项目团队之间的沟通，可以找到用户故事。
在这种状态下，用户故事只不过是对用户需求的简短描述。
没有详细讨论要求，没有系统逻辑，也没有屏幕设计。
实际上，目前用户故事的唯一目的仅仅是提醒所有各方今后讨论用户故事（卡片）中写入的用户请求。
用户故事有可能在将来被丢弃。

去做
通过不同利益相关者之间的讨论，确定将在未来几周内处理的用户故事，并将其放入称为冲刺的时间框中。
据说这样的用户故事处于待办事项状态。在这个周还没有进行详细的讨论。

讨论
当用户故事处于讨论状态时，最终用户将与开发团队通信以确认要求以及定义验收标准。
开发团队会将要求或任何决定写下来作为会话记录。
UX专家可以创建线框或故事板，让用户在视觉模型中预览建议的功能，并感受它。
此过程称为用户体验设计（UX设计）。

发展
在明确要求之后，开发团队将设计和实现这些功能以满足用户的要求。

确认
在开发团队实现用户故事后，最终用户将确认用户故事。
他/她将被允许访问测试环境或半完整的软件产品（有时称为alpha版本）以确认该功能。
确认将基于详细描述用户故事时所写的确认项目来执行。
在确认完成之前，用户故事被称为处于确认状态。

成品
最后，确认该功能已完成，用户故事被视为已完成状态。通常，这是用户故事的结束。
如果用户有新要求，要么是新功能，要么是对完成的用户故事的增强，团队将为下一次迭代创建新的用户故事。


使用故事地图组织用户故事

用户故事是构建更好的产品待办事项的有用方式，以用户为中心，以实用，可操作的方式描述软件需求。
但是，用户故事本身并没有透露整个图片，可以让您了解用户从加载应用程序到达到最终目标的那一刻所经历的更大旅程。

用户故事地图可以帮助我们将用户故事安排到可管理的模型中，以便系统地计划，理解和组织系统的功能。
通过操纵地图的结构，我们可以识别积压中的漏洞和遗漏，并在意义结构中将用户故事相互关联; 
帮助有效规划整体发布，为每个版本的用户和业务创造价值。
用户故事地图允许您向待办事项添加第二个维度。以下是您应该考虑使用此技术的几个原因：

1.它允许您查看待办事项中的大图。
2.它为您提供了一个更好的工具来决定整理和优先处理积压工作。
3.它促进了无声的头脑风暴和协作方法来生成您的用户故事。
4.它鼓励采用迭代开发方法，您的早期交付可以验证您的架构和解决方案。
5.它是传统项目计划的绝佳视觉替代品。
6.它是讨论和管理范围的有用模型。
7.允许您可视化项目/产品的维度规划和实际选项。


用户故事地图模板

故事映射是一种自上而下的需求收集方法，表示为树。故事映射从用户活动开始。用户活动应达到特定目标。
要完成活动，用户需要执行相关任务。这些任务可以转化为用于软件开发的史诗和用户故事。
通常，用户故事地图由3个级别组成：用户活动/用户任务/用户故事。
对于企业规模项目，通过在第三级引入Epics，可能更适合4级结构。

用户活动 - 它们在第二列中列出。这是系统必须支持的主要目标，具有切实的业务成果。整行构成了主干。

用户任务 - 每个用户活动都分解为一组称为叙述流的相关用户任务。整行形成行走骨架）

Epics /用户故事 - 每个用户任务都直接分解为功能实现的用户任务下面的Epics / User Stories。
根据项目的复杂程度，您的团队可以选择3或4级故事地图，如上所述，它更适合您。

Visual Paradigm Story Map支持3级和4级复杂性，可以应对各种类型的项目。

3级故事地图（用户激活>用户任务>用户故事）

4级故事地图（用户激活>用户任务>史诗>用户故事）

如果你想开发这样的故事地图，请查看Visual Paradigm的故事映射工具。


如何有效地使用用户故事？

与许多其他软件开发方法一样，如果您在软件项目中正确应用用户故事，您将能够生成高质量的软件系统，以赢得客户的信任和满意。
以下是使用用户故事时需要记住的一些要点：

1.保持用户故事的描述简短。
2.在编写用户故事时从最终用户的角度思考。
3.必须在开始开发之前定义确认项
4.在实施之前估算用户故事，以确保您团队的工作量得到控制。
5.最终用户可以找到需求，而不是最终用户或开发团队。与最终用户保持良好关系对双方来说都是双赢的局面。
6.沟通对于了解最终用户的需求始终非常重要。

准备好敏捷？

想要一个能够很好地管理Scrum项目的敏捷工具吗？
Visual Paradigm具有用户故事映射工具，Affinity Estimation工具，sprint管理工具和任务管理。

//--------------------------------------------------------------------------------------

参与的第一个敏捷项目
https://www.cnblogs.com/cjh123/p/12197272.html

角色：PO(Product Owner)、BA(Business Analys) 、TL(Technique Leader) 、QA (Quality Analyst) 、DEV 、UX(User Experience)

管理工具 ：看板、卡片（故事卡、管理卡、技术卡、缺陷卡）

敏捷开发的流程：

1.IPM（迭代计划会）     

参与人员：所有人
BA：阐述新迭代新迭代的计划和目标，讲解新的需求卡片
TL、DEV：估故事点（人力分配）
QA：了解业务需求，构思测试点　


2.Story Kick Off（开卡）

参与人员：BA、QA、UX、DEV
BA：根据分配给开发人员的卡片进行解读，使参与者对需求的理解达成一致
QA：提出需求设计存在不合理的地方，或者补充更加详细的需求细节（功能点）
UX：与开发人员对用户体验上的前端页面细节做确认


3.结卡

参与人员：BA QA  UX DEV
验收开发人员开发的功能点


4.每日站会

参与人员：所有人
昨天做了什么，遇到什么问题，今天的计划


5.Retro（迭代回归会）

1.总结本迭代做的好的，做的不好的，
2.对上次回顾会中总结出做的不好的点在本迭代中是否仍然存在。
3.所有人提出目前仍然存在的问题，并问题讨论出可行的措施，分配任务
4.QA作bug分析的总结


QA工作：

1.参与以上每一个环节
2.迭代开始前期对上个迭代的BUG进行总结和分析
3.站会时提出当前开发进度是否影响迭代的封版，需要BA、TL对开发人员的工作进行重新安排
4.卡片上写TestCases
5.故事卡的测试
6.迭代上线的前三天进行封版
7.回归测试
8.上线测试


//--------------------------------------------------------------------------------------

https://www.jianshu.com/p/a229453d32a9
敏捷开发流程


什么是敏捷开发？

以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发！
核心：用户的需求进化
方法：迭代、循序渐进


敏捷开发原则：

1、快速迭代
2、需求评审
3、编写story/验收标准
4、多沟通，尽量减少文档
5、做好产品原型
6、及早考虑测试


如何做到敏捷开发

1、产品需求
2、开发测试
3、部署运维


敏捷开发流程

首先是需求评审，产品经理与客户沟通好需求后，将客户的需求细化为一个个的story，需求评审由各leader参加。

一、story讲解

1.1 制作竞品分析PPT，UE全组参与。（用时：根据产品复杂度，0.5-2小时之内）
1.2 制作产品原型，交由客户看，客户没有异议之后拆story
1.3 产品在禅道拆分好story，并且定义出优先级，关联需求，后续开发根据优先级进行开发
1.4 由产品讲解story，前端和后端都参与。（用时：根据产品的复杂度，1-3小时之内）


二、人员划分

2.1 新建wiki项目主业，把PPT和产品原型（HTML文件）上传到wiki
2.2 根据产品原型，按照模块划分相关负责人，前端和后端都是，并放到wiki。（由项目负责人新建）
命名：xxx项目人员分工（前（后）端）


三、做方案设计、定义接口文档（2-3天）

3.1 前端后端相关人员一起，对照原型，根据模块及页面大概定义出接口
3.1.1 一个页面中有几个接口，每个接口入参与出参是什么
3.2 后端每个模块的负责人，根据开会讨论的结果，在wiki上生成标准的接口文档
3.3 将后端做好的接口文档发给前端模块负责人过目，有问题继续修改；没问题开始后续的步骤 。


四、方案设计（1小时-1天左右，根据模块大小定义时间）

4.1 后端开发人员，根据原型以及定义的接口，做好方案设计
4.1.1 对有难度或者有疑点的接口，做出方案，尽量给出多个合理方案
4.1.2 每个方案写清楚优点缺点


五、方案评审（2-3小时）

5.1 对做出的方案设计，做方案评审，建议全体人员参与（无论做不做该项目）


六、禅道拆分（1-2小时）

6.1 相关负责人按照优先级顺序，在禅道拆分自己的任务，单个任务最多不要超过4小时，即拆分要详细


七、开发

7.1 搭建开发服务器
7.2 开发人员根据禅道上的任务，按时完成自己的开发工作，具体体现到日报上
7.3 每天上午开10分钟左右进度会议，如果有延迟现象出现，拿出解决方案，保证项目按照禅道上的时间点完成
7.4 数据库索引：

两种索引：
1.经常查询的，数据散列度比较高的，做一般索引，不需要建联合索引。
2.数据必须保持唯一的，建唯一索引。

要有文档，文档表明哪些字段要建索引。发邮件。


八、阶段测试

与开发并行

8.1 每天至少发布一次代码到开发环境，并且保证发布完之后程序没问题


九、性能测试和CodeReview（1天）

9.1 对每个接口做好性能测试
9.1.1 每个接口的响应时间不超过200ms，如果有超过的，做优化，尽量缩小到200ms内
9.2 完成codereview，根据codereview结论完成修改


十、压力测试

10.1做好压测报告


十一、 Demo

1、发demo申请邮件，收件人包括产品、测试同学、前后端相关开发人员
主题：XX项目demo通知
内容：时间 地点  参会人员

2、开demo会议：主讲人：某个开发人员
会议途中产品和测试提出问题

3、发demo结果通知邮件(由产品同学发)
内容包括：1、demo结果  2、如果不通过，有哪些问题

4、如果不通过，召集第二次Demo会议，知道通过为止。第二次会议只需演示之前不通过的部分

11.2 测试

1、demo通过之后，
1.1：开发人员对代码打tag，参考文档如何打tag；
1.2：开发人员部署测试环境，部署完成之后发邮件，写明域名；
1.3：交给测试人员进行测试，测试人员发送全体测试周期邮件；

2、测试期间，开发人员要常去禅道看自己的BUG ，及时确认BUG，及时修改

3、修改BUG之后，开发环境前端代码由前端同学自己部署，后端代码由后端同学自己部署

测试环境每天的下午6点由后端同学统一部署前后端代码

4、测试完成之后，测试或产品发送上线通知


十二、 发布测试环境、集成测试（2-3天）

12.1 禅道上建立bug，测试出bug，指派给相关人员修改


十三、发布线上环境，同时停止开发环境和测试环境


十四、线上监控

错误报告

//-------------------------------------------------------------------------------------------------------

完成的定义

所有项目都需要完成的定义（Definition of Done，DoD）。为了验收判断是否完成，所有用户
故事都必须符合清晰的完成的定义。下面是开发人员经常提及的，你有听到过多少次呢？

“做完了，不过我还要再做一下测试……”
“做完了，但是我刚刚又发现了一个问题，可能需要修复……”
“做完了，只是我觉得设计还不完美，我计划改一下接口……”

我过去也用过这些托辞。如果真的做完了，那就说“做完了”，不需要再附加任何说明、条件或解释。
上面这几个例子实际上代表着开发人员还需要多一点时间，因为他们原先的估算不够好或者遇到某个未预料到的问题。
所有人必须认同并且至始至终遵守完成的定义。如果一个故事不符合标准，它不能算是真正完成了。
只有符合完成的定义的用户故事才可以标记为完成状态。
完成的定义都包含什么？这完全取决于你、你的团队，以及你想要的质量保证流程的严格程度。
无论如何，你可以参考下面这个常用的完成的定义。

为了将某个用户故事标记为完成状态，必须确保以下事项。
* 对所有代码的成功和失败路径都做了完整的单元测试，并且通过了所有测试。
* 所有代码都无误地提交到了持续集成系统中，编译和构建是成功的，并且通过了所有测试。
* 通过了验收标准和产品负责人的验收。
* 不在同一个用户故事下的开发者相互实施了代码评审。
* 只撰写了适量的用于沟通的文档。
* 拒绝了那些不计后果的技术债务。


//-------------------------------------------------------------------------------------------------------



大规模扩展第四次工业革命创新

灯塔工厂在新冠疫情暴发前后取得的成就足以证明：大规模整合第四次工业革命创新是企业长期发展的核心要素。
一些企业甚至打通了端到端价值链，将第四次工业革命创新拓展到实体工厂范畴之外。
这使不少组织相形见绌：麦肯锡于2020年末进行的一项调查显示，约有74%的全球制造企业自称深陷“试点困境”。
事实证明，规模化的标准已经发生变化，且远比最初的预想具有挑战性。
经历了市场波动与扰乱带来的压力测试后，企业也逐渐发现，此前的工业投资并没有带来计划中的规模化扩张。
面对动荡不安的市场，26%的领先企业如何成功实现了大规模扩张？
归根结底有两大秘诀：一是打造敏捷工作模式，二是提升员工能力技能。


敏捷工作模式是企业成功扩展的核心。
为了充分发挥第四次工业革命技术在生产网络和供应链中的潜力，企业必须基于敏捷原则，在迭代中进行创新和转型。
这样企业就能以协作的方式快速应对变化，提前预判技术的局限性，并快速突破局限。
灯塔工厂坚持快速迭代、快速试错、持续学习，并以两周为周期开发最小可行性产品。
同样的原则也适用于以月为周期的捆绑用例，从而分阶段快速推动转型。
上述敏捷模式与以年为计算单位的传统试点项目形成鲜明对比。
传统试点项目追求完美，但由于技术创新的更新速度过快，试点项目往往完成后便面临淘汰。


员工如果没有掌握第四次工业革命所需的必备技能，敏捷工作模式就无法充分发挥其潜力。
第四次工业革命技术的部署会为员工职责带来诸多改变，而企业唯有真正理解“以人为本”的重要性，才能在转型中取得不俗成绩。
对劳动者采用阶梯式技能提升策略，能够确保劳动力始终与转型保持紧密联系，并直接参与到转型的进程中。
此外，该策略还能帮助员工掌握未来创新所需的专业技能。



打造敏捷工作模式，推动规模化发展

领先企业已经充分依托敏捷工作模式，在生产网络和价值链上迅速扩展了第四次工业革命解决方案，
从而实现了前所未有的可持续增长。通过提升运营过程的灵活性和适应性，灯塔工厂极大地鼓励了思维模式创新和动态工作方法。
这样一来，他们便能密切追踪市场供需和客户期望的转变。这种增长正在超越单一工厂的局限，在整个生产网络和价值链得以扩展。

这一点从拥有灯塔工厂的企业数量变化上便可见一斑：
2018～2021年，在先进工业、包装消费品、医药产品和流程工业等领域，拥有灯塔工厂的企业数量从9家增长到36家，足足翻了两番。
上述企业正在通过自身转型来重构整个行业的生产网络和价值链。

通过提升生产网络能力和饱和度的透明度，再辅以动态的生产网络场景规划，
领先企业可以灵活应对因客户偏好改变而产生的需求变化，如引入新品类，或实现高水平的定制化生产等。
在此过程中，企业也能够锻炼他们应对供应链中断、分销渠道受阻，或是工厂关闭等意外事件的能力。
敏捷是优秀组织的代名词，它意味着组织可以在不牺牲质量的情况下提高速度和灵活性。
灯塔工厂还在致力于提升生产网络的透明度和可追溯性。
通过在整个价值链共享数据模型，他们可以在兑现可持续发展承诺的同时，
为消费者提供有关产品来源、成分和二氧化碳足迹的洞见，帮助消费者进行购买决策。

考虑到某些企业的生产网络较为分散，如果只在某一家工厂部署第四次工业革命技术，企业并不会看到积极效益。
因此，企业可以选择在各个工厂快速规模化部署数字化解决方案和数字化能力，
从而快速突破整个生产网络面临的生产瓶颈，并提升单个工厂的生产力。
通过在生产网络层面协调推广第四次工业革命技术和智能工作模式，领先公司成功实现了技术赋能。
各个工厂在提升自身敏捷度与能力的同时，还会与其他工厂彼此鼓励，相互促进，最终实现多赢。


施耐德电气在全球五大工厂推广第四次工业革命用例

施耐德电气（Schneider Electric）
于2017年开始在五大工厂部署第四次工业革命战略，目前足迹已遍布80多座互联互通的工厂。
从三家单个生产场所灯塔和两家端到端灯塔中，可以看到很多职能层面的数字化用例。
施耐德电气打造了一个数字化转型办公室，组织内外人才在敏捷工作模式下，
制定整个组织的转型路线图，整理用例的优先顺序，并在整个运营网络中推广用例。
公司因此获得了一个“秘密武器”：一项由上而下的第四次工业革命全球化数字战略。


标准IT/运营技术平台是快速推动第四次工业革命战略横向部署的基础，
这有助于在推广数字化战略的过程中，为整个组织提供转型路线图，避免延迟和瓶颈的出现。
员工培养是几乎所有第四次工业革命创新的关键；因此，施耐德成立了专门培养员工能力的“数字学院”。
从基础设施和技术到运营模式与技能提升，组织上下每一个环节都在经历第四次工业革命转型。
这一过程离不开每一位员工的倾情参与。该公司还提高了劳动生产效率，在向客户按时足量交付的同时，
降低了报废成本，并减少了二氧化碳排放和总能耗。


大力培养和提升员工技能

员工的重要性不言而喻：灯塔工厂深知，员工技能 提升是采用敏捷工作模式和充分释放数字化转型潜力的关键，
因此，他们始终将员工培养列为重点工作。培训、再培训和技能提升等举措能够帮助员工适应并融入第四次工业革命。
通过坚持以人为本，灯塔工厂在推动第四次工业革命转型的过程中始终关注包容性增长，
鼓励各级员工都参与到行业的重构中，共同打造一个富有创新力和创造力的未来。 

规模化增长需要团队的力量，而团队则离不开每一位员工的贡献。
西门子根据第四次工业革命发展要求，量身定制员工技能发展为了提升生产效率，
西门子德国安贝格工厂有条不紊地采用了一种精益数字管理方法；
它在不增加用 电量或调整资源的前提下，不仅令产品复杂度加倍，
还让工厂产出提升了140%在提高生产效率的过程中，西门子还根据每名员工特点，量身定制了技能提升计划。
他们用机器人技术改善物流运营、提高劳动效率；用数字工程优化了各项措施；
用人工智能驱动的过 程控制加快了工作进度；
用预见性维护系统提高了OEE，并用远程质量优化分析平台改善了流程质量。
西门子深知，技能提升是充分释放第四次工业革命潜力的关键。
为此，西门子基于第四次工业革 命发展要求，为每位员工量身定制了技能提升路径。
与惠普一样，为了提 升员工技能，西门子在高校合作、内部培训和针对性培训上“三管齐下”。


惠普借助第四次工业革命优化举措，成功提升员工技能，
减轻工作负担惠普（HP Inc.）新加坡工厂的第四次工业革命之旅以提升员工技能为重点。
产品日趋复杂，劳动力 却供不应求，这使惠普新加坡工厂在质量和成本方面挑战重重。
此外，国家层面也在强调高价值制造业的重要性，因此，惠普踏上了第四次工业革命之旅，
一改被动的劳动力密集型模式，成为人工智能 驱动的高度数字化模式。
从人为操作转向自动化后，惠普成功降低了制造成本，提升了生产效率和质量。
第四次工业革命优化举措大大减轻了员工负担，给予员工更多时间和空间来提升自身技能。
例如，操作员摇身成为技术专家，开始得心应手地处理复杂任务，其他员工职责也相应发生转变。
与西门子类似，惠普通过高校合作、内部培训、针对性培训“三管齐下”完成转型。

考虑到第四次工业革命引入了全新的工作方式，员工技能提升是充分释放数字化转型潜力的关键。
为了简明扼要地阐述两大方法，我们绘制了西门子个人框架和惠普团队框架。

基于第四次工业革命发展要求，为每位员工量身定制技能提升路径西门子，
安贝格技能提升路径根据职位要求制定，所需的关键技术和能力要求都被纳入考量。

通过任务转移提高劳动者技能惠普，新加坡第四次工业革命优化举措大大减轻了员工负担，给予员工更多时间和空间来提升自身技能。
使用自动化机械来替代原本重复繁重的基础工作，把生产人员重基本劳动中解放出来，承担更多原本上层负责的工作，使之带来更多的灵活性。
让职能转移带来更多的灵活性，让敏捷迭代真正落实到基础生产领域。

第四次工业革命技术被广泛应用到整个生产网络、端到端价值链，以及支持性职能中，推动组织层面不断转型。
这也基本确定了用例的演变方向。

类别			定义
生产网络		公司旗下所有工厂
端到端价值链	端到端产品开发、规划、交付、 供应网络和客户连接性
支持性职能		人力资源、财务、IT 等职能部门



//-------------------------------------------------------------------------------------------------------






